{"_id":"multi-integer-range","_rev":"47-7f94852a37d40e2dc09e194a1a836b77","name":"multi-integer-range","description":"Parses and manipulates multiple comma-separated integer ranges (eg 1-3,8-10)","dist-tags":{"latest":"5.2.0","next":"5.0.0-rc.2"},"versions":{"1.0.0":{"name":"multi-integer-range","version":"1.0.0","description":"Parses and manipulates multiple comma-separated integer ranges (eg \"1-3,8-10\")","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"main":"./js/multi-integer-range.js","scripts":{"test":"mocha","build":"tsc"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"chai":"^3.3.0","mocha":"^2.3.3","typescript":"^1.6.2"},"gitHead":"fba3a07b1b4f53204dcacab403816b371d9cfda1","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@1.0.0","_shasum":"0eeac24dda4079c5fcdd4c731b7bcedf58ea1ab5","_from":".","_npmVersion":"3.3.7","_nodeVersion":"4.1.1","_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"dist":{"shasum":"0eeac24dda4079c5fcdd4c731b7bcedf58ea1ab5","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-1.0.0.tgz","integrity":"sha512-Hg4dlBqDBYGNMOP21Ey8RFK6jx58UvxxoVV2+OcUHQ5mrnQ9tkx9/iUU1DcpvzdX7skbbUDsISXtfH4V4aW0iA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIF9A8dpvFYiLItDAuBrBTmtLCbNGoBcprm09xGNeLZJ2AiEAvpxmQBR6CjkoaKPD2Drl/bpuG+8KQmQaXW4e2Hwmk+8="}]},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"directories":{}},"1.0.1":{"name":"multi-integer-range","version":"1.0.1","description":"Parses and manipulates multiple comma-separated integer ranges (eg \"1-3,8-10\")","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"main":"./lib/multi-integer-range.js","scripts":{"test":"mocha","build":"tsc"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"chai":"^3.3.0","mocha":"^2.3.3","typescript":"^1.6.2"},"gitHead":"0fd096e6838ee82446827036b6e6bb42628e260c","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@1.0.1","_shasum":"648c90c189dedbc38edb54a3cb7129c0ca5bcf3b","_from":".","_npmVersion":"3.3.7","_nodeVersion":"4.1.1","_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"dist":{"shasum":"648c90c189dedbc38edb54a3cb7129c0ca5bcf3b","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-1.0.1.tgz","integrity":"sha512-VzIhE9/JE3yJS1mYEmAoDMjot9Wr5f/a984XoSGdvQokFSoMyBYLf2YiPFXbtttyzzHIHHgrhs0fFObOOXxY6w==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGNaiZI1nu+i6k7Mv1AhpeRsbuzGViPUXM8++mUhQX4XAiEAmOB9QCGD0eP6lpp2K6uijl9fmRTI5XIhDZMirSuY2eE="}]},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"directories":{}},"1.1.0":{"name":"multi-integer-range","version":"1.1.0","description":"Parses and manipulates multiple comma-separated integer ranges (eg \"1-3,8-10\")","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"main":"./lib/multi-integer-range.js","scripts":{"test":"mocha","build":"tsc"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"chai":"^3.3.0","mocha":"^2.3.3","typescript":"^1.6.2"},"gitHead":"0cf8c94554c00e4a0cdee17a39ffc1b788988c1f","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@1.1.0","_shasum":"44b53537c71275457fb2097e6f1a211e8a372ca3","_from":".","_npmVersion":"2.14.4","_nodeVersion":"4.1.1","_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"dist":{"shasum":"44b53537c71275457fb2097e6f1a211e8a372ca3","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-1.1.0.tgz","integrity":"sha512-ugtd69N4cL0ar3jiZgKd3D5Nsr2YBx4VSDsga1MLmWbPirzw2t1OmY4LcOXz/Gye94ZO/kH9Q7eXQiRji4AE0g==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIH3kqDz25KUYEbun6hHCWrtwqdS4+n1SZdeIswhQX30mAiEAhuOA/TeN2KbqY9YftENNnyLCGHHUNidbKCRg5Zf0gcA="}]},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"directories":{}},"1.2.0":{"name":"multi-integer-range","version":"1.2.0","description":"Parses and manipulates multiple comma-separated integer ranges (eg \"1-3,8-10\")","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"main":"./lib/multi-integer-range.js","scripts":{"test":"mocha","build":"tsc"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"chai":"^3.3.0","mocha":"^2.3.3","typescript":"^1.6.2"},"gitHead":"207566cfeb9e5f4f53826d760bdc5f9ab2c16b99","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@1.2.0","_shasum":"fffdc78f416f30b10df0c4d276a172873ae1b7bb","_from":".","_npmVersion":"2.14.4","_nodeVersion":"4.1.1","_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"dist":{"shasum":"fffdc78f416f30b10df0c4d276a172873ae1b7bb","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-1.2.0.tgz","integrity":"sha512-Rc3eTlCWVHLAk9PCAkaHhPTzQlx7jRgOHhdMmRIV+vfYqWNDYWhROhdcKak//XgYMhWmR9GEanQ7zFWpazEswg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCPp/bcX7+p7OVkLG180lfJbyL3CXL+iclfqRyD6T4I0AIhANukaJQb0ltwbVgBfsfsKEgvJNw1SOPm0NFEJ90YVYZT"}]},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"directories":{}},"1.2.1":{"name":"multi-integer-range","version":"1.2.1","description":"Parses and manipulates multiple comma-separated integer ranges (eg \"1-3,8-10\")","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"main":"./lib/multi-integer-range.js","typings":"./lib/multi-integer-range.d.ts","scripts":{"test":"mocha","build":"tsc"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"chai":"^3.3.0","mocha":"^2.3.3","typescript":"^1.6.2"},"gitHead":"245d93a2f169c992f122b9c5266003ef0fda693f","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@1.2.1","_shasum":"dadecf6ed9362767eef6f533636899e28abc7839","_from":".","_npmVersion":"2.14.4","_nodeVersion":"4.1.1","_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"dist":{"shasum":"dadecf6ed9362767eef6f533636899e28abc7839","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-1.2.1.tgz","integrity":"sha512-Ch1uLszGpVLrEiFwo9X00zsWBK7xw3hq+CHfAkwR6Dy3u3Tz5RVClKpaHbx0s6eemPo1WE8uJf2djZhmoz65ZQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFlO15TMEtz7cYtgpLe0/HvPuVaRu8BHSlt+dl9OHj62AiB9tr16VGGxNlzBxHhCuaNYrOfeFd/Ij08a2isaU6ZRsQ=="}]},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"directories":{}},"1.3.0":{"name":"multi-integer-range","version":"1.3.0","description":"Parses and manipulates multiple comma-separated integer ranges (eg \"1-3,8-10\")","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"main":"./lib/multi-integer-range.js","typings":"./lib/multi-integer-range.d.ts","scripts":{"test":"mocha","build":"tsc"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"chai":"^3.3.0","mocha":"^2.3.3","typescript":"^1.6.2"},"gitHead":"150b38ec0bf829850c3e008d28bf60ea2935e0e0","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@1.3.0","_shasum":"beeb0d1a046849cbc5a914112bc9e0f8e5e1885c","_from":".","_npmVersion":"3.3.7","_nodeVersion":"4.1.1","_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"dist":{"shasum":"beeb0d1a046849cbc5a914112bc9e0f8e5e1885c","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-1.3.0.tgz","integrity":"sha512-4Q7aJsqaSuheNAY++tdhKsLoRW50RwrVboo3vV0QsC+XL0OK4kFJ2YPk6ml0Myc5zYGG4s0c6joOL7uyZD36og==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCZxgJsSeZt18lMox5ExFMrkmTEDSLcJFFw0WAroz5jhwIgXZxztilGVwkJ1akmtAPhZ6ABtRpNp5tBhWKH4g3IrBI="}]},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"directories":{}},"1.3.1":{"name":"multi-integer-range","version":"1.3.1","description":"Parses and manipulates multiple comma-separated integer ranges (eg \"1-3,8-10\")","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"main":"./lib/multi-integer-range.js","typings":"./lib/multi-integer-range.d.ts","scripts":{"test":"mocha","build":"tsc"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"chai":"^3.3.0","mocha":"^2.3.3","typescript":"^1.6.2"},"gitHead":"5e1652eccfd80497bac09ce5755e59b80bc1d91d","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@1.3.1","_shasum":"2b551f206e831a3aa177b19566a9ee802736f9df","_from":".","_npmVersion":"3.3.7","_nodeVersion":"4.1.1","_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"dist":{"shasum":"2b551f206e831a3aa177b19566a9ee802736f9df","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-1.3.1.tgz","integrity":"sha512-WQO6/r8iGA269WRQ5wolKix9Ojr6Ox4ywj0/4F8kqCh+sHbdVE2pB5y7cEWNHYVLAXUycS/jz6bE5MM6nPQ7bA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIG7x5SxfqgNA/ioeHqyhCrkvnMTpQ4CFgvqEGodAu69wAiB5luuxGujOevLBmnXJBTj9VK94JtwY1Tb6tMMCyaTh1Q=="}]},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"directories":{}},"1.4.0":{"name":"multi-integer-range","version":"1.4.0","description":"Parses and manipulates multiple comma-separated integer ranges (eg \"1-3,8-10\")","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"main":"./lib/multi-integer-range.js","typings":"./lib/multi-integer-range.d.ts","scripts":{"test":"mocha","build":"tsc"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"chai":"^3.3.0","mocha":"^2.3.3","typescript":"^1.6.2"},"gitHead":"6b966f4ab047c7ba0b3b40434757799994305a33","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@1.4.0","_shasum":"b44d1caa0ea2a407132f00af5d4a323f2b0e61b8","_from":".","_npmVersion":"3.3.12","_nodeVersion":"5.4.1","_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"dist":{"shasum":"b44d1caa0ea2a407132f00af5d4a323f2b0e61b8","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-1.4.0.tgz","integrity":"sha512-4vuj9si5IgPMGULmEZ7u4cujymB4zEemp4p+liI7XPveZM/g9QTYGQqaRMPq7EA2gadKpEXAVfAsBtyW3Pz4hg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDyW4MlotDD+QwSGqHQHVkYUJJaqJ5FvQK6XLwwXbE+dQIhAOF5P8jNJdvJ858AIOmmHm4wKRuISo1JhUFbe6dtaJ7F"}]},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"directories":{}},"1.4.1":{"name":"multi-integer-range","version":"1.4.1","description":"Parses and manipulates multiple comma-separated integer ranges (eg \"1-3,8-10\")","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"main":"./lib/multi-integer-range.js","typings":"./lib/multi-integer-range.d.ts","scripts":{"test":"mocha","build":"tsc"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"chai":"^3.3.0","mocha":"^2.3.3","typescript":"^1.6.2"},"tonicExample":"var MultiRange = require('node-multi-integer-range').MultiRange;","gitHead":"0f336f88c7139a670cc99f938a8f69ed06bacf77","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@1.4.1","_shasum":"74d512ae71444cd94ab896740e24237927e0b4fa","_from":".","_npmVersion":"3.3.6","_nodeVersion":"5.0.0","_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"dist":{"shasum":"74d512ae71444cd94ab896740e24237927e0b4fa","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-1.4.1.tgz","integrity":"sha512-Wcliuk9fw8TfTjp6R/QCZOO/6Xl59aaMUXIg6JUjT7xeMqeaXxVwDfNbcBVmeSSynIgrtUkJpxfsHxkR/Ie5ag==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD1qzD/VlBSuJEKstBviMH81aqQoM3GCXquEe+S0ObY1gIhALTmjt7KhFgu0L5VhtMzR1PPrXTRFX72B+7+xmDWKzri"}]},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"directories":{}},"1.4.2":{"name":"multi-integer-range","version":"1.4.2","description":"Parses and manipulates multiple comma-separated integer ranges (eg \"1-3,8-10\")","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"main":"./lib/multi-integer-range.js","typings":"./lib/multi-integer-range.d.ts","scripts":{"test":"mocha","build":"tsc"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"chai":"^3.3.0","mocha":"^2.3.3","typescript":"^1.6.2"},"tonicExample":"var MultiRange = require('multi-integer-range').MultiRange;","gitHead":"3549ce59a28fe4ff029fbe48d1d5961af7fec656","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@1.4.2","_shasum":"1431f6329d75f3cd6e02abafcd8f475772991bdd","_from":".","_npmVersion":"3.3.6","_nodeVersion":"5.0.0","_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"dist":{"shasum":"1431f6329d75f3cd6e02abafcd8f475772991bdd","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-1.4.2.tgz","integrity":"sha512-y6DmzE1vGW4JqNKUbpPLAOKfQPCj47pA55Pz5xWmLGcuS7GvRtPrvmyUBFzcsJx0gnSBETNCrjWlmDh0FHHi3g==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCQIgpF4gMjZ2hKuAV8TrBGlT0Bb/q71LPqCSXt74i/GwIge9TzRCcnYyrbG+PshIJvqnhseEre+fVBWXFfvskGI7M="}]},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"directories":{}},"1.4.3":{"name":"multi-integer-range","version":"1.4.3","description":"Parses and manipulates multiple comma-separated integer ranges (eg `1-3,8-10`)","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"main":"./lib/multi-integer-range.js","typings":"./lib/multi-integer-range.d.ts","scripts":{"test":"mocha","build":"tsc"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"chai":"^3.3.0","mocha":"^2.3.3","typescript":"^1.6.2"},"tonicExample":"var MultiRange = require('multi-integer-range').MultiRange;","gitHead":"f30d668e2cb0bc30f79aee19ca02d12d248eb531","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@1.4.3","_shasum":"f6bf30aae538acc7910c219943197b51094e6389","_from":".","_npmVersion":"3.3.12","_nodeVersion":"5.2.0","_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"dist":{"shasum":"f6bf30aae538acc7910c219943197b51094e6389","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-1.4.3.tgz","integrity":"sha512-FdklXxnqnnB9GRyZkBH72Yi89flYrWhfieajOxDdKi91XQ7CSuyRe4ZUbI9bUsNPYQegzDKZwNnRUVPvccmL1A==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDT5SDjzM0gbSXnuPxqBh75a/ynQvLkWxjt2gLs6sCCLAiBtcimI0f1IFolE6IR15cDhEv7Rxip1A5lp36CAtYIeew=="}]},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"_npmOperationalInternal":{"host":"packages-5-east.internal.npmjs.com","tmp":"tmp/multi-integer-range-1.4.3.tgz_1455676317739_0.13596594240516424"},"directories":{}},"2.0.0":{"name":"multi-integer-range","version":"2.0.0","description":"Parses and manipulates multiple comma-separated integer ranges (eg 1-3,8-10)","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"main":"./lib/multi-integer-range.js","typings":"./lib/multi-integer-range.d.ts","scripts":{"test":"mocha","build":"tsc"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"chai":"^3.5.0","mocha":"^2.5.3","typescript":"^1.8.10"},"tonicExample":"var MultiRange = require('multi-integer-range').MultiRange;","gitHead":"6edb89fc48628a30ee572981c74c8d06e6b1a9f2","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@2.0.0","_shasum":"1cab4ae32c9803af79b9f259307ede6835e476bf","_from":".","_npmVersion":"3.9.6","_nodeVersion":"6.2.1","_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"dist":{"shasum":"1cab4ae32c9803af79b9f259307ede6835e476bf","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-2.0.0.tgz","integrity":"sha512-dlJ2ZIfbStRsKD8TCJyw8D8KsNDonzj+O5KdfHJT1+FnQFYI2/kHkR1hRieCSZ//SXOCU5Bx2ZxgnA7RSU7wYg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIE/t8w+AfFEGt96ud2nDqN1Hsq8Ez9yXJbbIfb/ZNAMPAiAoWGN0FsWMsZvO3aUfDgmgf2RsdOsG0qZr5B+tei5v3A=="}]},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/multi-integer-range-2.0.0.tgz_1466694684470_0.4295863297302276"},"directories":{}},"2.1.0":{"name":"multi-integer-range","version":"2.1.0","description":"Parses and manipulates multiple comma-separated integer ranges (eg 1-3,8-10)","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"main":"./lib/multi-integer-range.js","typings":"./lib/multi-integer-range.d.ts","scripts":{"test":"mocha","build":"tsc"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"chai":"^3.5.0","mocha":"^2.5.3","typescript":"^1.8.10"},"tonicExample":"var MultiRange = require('multi-integer-range').MultiRange;","gitHead":"da4e5b0194aa4391008496e768f540ee319908d0","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@2.1.0","_shasum":"73675519ba2146dba22cd35960e9c5e804ffe2fc","_from":".","_npmVersion":"3.9.6","_nodeVersion":"6.4.0","_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"dist":{"shasum":"73675519ba2146dba22cd35960e9c5e804ffe2fc","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-2.1.0.tgz","integrity":"sha512-hhxJJyEXhLlsCgzMsX10NlPL35yM/v/ThBNlHgLP/84/Wkf6VugIMIVqEH1m0bvOwGYSmz92yhPLKdoPV87BBg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHM6Ls43iTjk0K/nltb/9qTLwX2HnMLDh0rJ4j2HFSwOAiEAzqYNRy3yTHclAj69tGo2BmVaRuWV8UOgybKu6VXAT8U="}]},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/multi-integer-range-2.1.0.tgz_1473157078711_0.44383327127434313"},"directories":{}},"3.0.0":{"name":"multi-integer-range","version":"3.0.0","description":"Parses and manipulates multiple comma-separated integer ranges (eg 1-3,8-10)","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"main":"./lib/multi-integer-range.js","typings":"./lib/multi-integer-range.d.ts","scripts":{"test":"mocha","build":"tsc","coverage":"istanbul cover _mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | coveralls"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"chai":"^3.5.0","coveralls":"^2.11.14","mocha":"^3.0.2","mocha-lcov-reporter":"^1.2.0","typescript":"^2.0.3"},"tonicExample":"var { MultiRange, multirange } = require('multi-integer-range');","gitHead":"ec1a754d9e76a3f5d8e2bb289a2a187cb959ebbb","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@3.0.0","_shasum":"d8ec2744d08758f2acf81653d2fe038a95cf7595","_from":".","_npmVersion":"3.10.3","_nodeVersion":"6.7.0","_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"dist":{"shasum":"d8ec2744d08758f2acf81653d2fe038a95cf7595","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-3.0.0.tgz","integrity":"sha512-uQzynjVJ8F7x5wjaK0g4Ybhy2TvO/pk96+YHyS5g1W4GuUEV6HMebZ8HcRwWgKIRCUT2MLbM5uCKwYcAqkS+8Q==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCYEngX7O5kyzW7N6GEUL/DJCrTwVyBNClm7rm4IEfSLAIgYG5WaEC2VXwh4Z7Mj0RlHMdmgvihH1UPRsIRMOJlw6E="}]},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/multi-integer-range-3.0.0.tgz_1475771063847_0.053088203305378556"},"directories":{}},"4.0.0":{"name":"multi-integer-range","version":"4.0.0","description":"Parses and manipulates multiple comma-separated integer ranges (eg 1-3,8-10)","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"main":"./lib/multi-integer-range.js","typings":"./lib/multi-integer-range.d.ts","scripts":{"test":"mocha","build":"tsc","coverage":"istanbul cover _mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | coveralls"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"chai":"^4.1.0","coveralls":"^2.11.14","mocha":"^3.0.2","mocha-lcov-reporter":"^1.2.0","typescript":"~2.4.1"},"tonicExample":"import MultiRange, { multirange } from 'multi-integer-range';","gitHead":"0c00bc6e7ae97116373f9af866ce1d2fe505cd8a","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@4.0.0","_shasum":"a14a534fdd06311d6ae168a93ab4fc9e50234da7","_from":".","_npmVersion":"2.15.9","_nodeVersion":"4.5.0","_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"dist":{"shasum":"a14a534fdd06311d6ae168a93ab4fc9e50234da7","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-4.0.0.tgz","integrity":"sha512-veyGvTLvdK+H/zUr04vFbjTo2VVjM/2nE90Tv4tOIt6fhetc41185q5ollPC7h/V0K+t7HgjEtaEtwQDNx92Pg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCneAc5UBdRdR8pdWx5hlqtLMVZQFJZjhTs2x8WbFrxOgIgeh3f7v3jorq5/dqHJrYE7G+Zn0WjPn597DCMVdaWRgY="}]},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/multi-integer-range-4.0.0.tgz_1500097677353_0.34934439533390105"},"directories":{}},"4.0.1":{"name":"multi-integer-range","version":"4.0.1","description":"Parses and manipulates multiple comma-separated integer ranges (eg 1-3,8-10)","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"main":"./lib/multi-integer-range.js","typings":"./lib/multi-integer-range.d.ts","scripts":{"test":"mocha","build":"tsc","coverage":"istanbul cover _mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | coveralls"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"chai":"^4.1.0","coveralls":"^2.11.14","mocha":"^3.0.2","mocha-lcov-reporter":"^1.2.0","typescript":"~2.4.1"},"tonicExample":"import MultiRange, { multirange } from 'multi-integer-range';","gitHead":"dff0508427065c28729c0d337fc9119db50ba04b","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@4.0.1","_shasum":"c2c1eb399a136b4bfbaa660c52c1ef224a013f22","_from":".","_npmVersion":"2.15.9","_nodeVersion":"4.5.0","_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"dist":{"shasum":"c2c1eb399a136b4bfbaa660c52c1ef224a013f22","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-4.0.1.tgz","integrity":"sha512-DsKx8XYcVpVOnDhJvK8V5B+T1l1adEUI1wMDjJ/3C981dEg+YqRgSrD8PNN6Moo0XHVnPpLE/Hbi1ae7bmVwpg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFsqGw7185DnaJkXr03frnIIvFQZTzGJi7AlVrxxRYO6AiEA0acX5xrxGmKbzetQyzLnwYqc84GlQ9Hya1wyzuwy7Ng="}]},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/multi-integer-range-4.0.1.tgz_1500104909122_0.7089768429286778"},"directories":{}},"4.0.2":{"name":"multi-integer-range","version":"4.0.2","description":"Parses and manipulates multiple comma-separated integer ranges (eg 1-3,8-10)","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"main":"./lib/multi-integer-range.js","typings":"./lib/multi-integer-range.d.ts","scripts":{"test":"mocha","build":"tsc","coverage":"istanbul cover _mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | coveralls"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"chai":"^4.1.0","coveralls":"^2.11.14","mocha":"^3.0.2","mocha-lcov-reporter":"^1.2.0","typescript":"~2.4.1"},"runkitExampleFilename":"example.js","gitHead":"bb03d667185a02d1373383791673a9398ad1cb5f","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@4.0.2","_npmVersion":"5.3.0","_nodeVersion":"8.1.4","_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"dist":{"integrity":"sha512-16Ighx9a/Vmla+VR2L+GDXx8oPAijFdVyE8GcUQXA0p/LZYJFpJhN8tm83qrlnki0PEUJC0ib/2hjr2qCWxnxg==","shasum":"2dbe57c1390beb026f9cbbc69e8db9bbe5f96369","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-4.0.2.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCVtxrKtug3ppy4kYkgvwBoLe/fpldogmVQJIuPGCOG1QIgaPc9eZv9RhSw07FcbMPLGASWPcJ8qYhtETk6FIKNQpQ="}]},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/multi-integer-range-4.0.2.tgz_1500111235529_0.23195667518302798"},"directories":{}},"4.0.3":{"name":"multi-integer-range","version":"4.0.3","description":"Parses and manipulates multiple comma-separated integer ranges (eg 1-3,8-10)","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"main":"./lib/multi-integer-range.js","typings":"./lib/multi-integer-range.d.ts","scripts":{"test":"mocha","build":"tsc","coverage":"istanbul cover _mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | coveralls"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"chai":"^4.1.0","coveralls":"^2.11.14","mocha":"^3.0.2","mocha-lcov-reporter":"^1.2.0","typescript":"~2.4.1"},"runkitExampleFilename":"example.js","gitHead":"6fbe85f5424f17748d17829213cb0a106b00806d","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@4.0.3","_npmVersion":"5.3.0","_nodeVersion":"4.5.0","_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"dist":{"integrity":"sha512-gsPA7vg8RX8Ye8sNlZ8XsRujJMH//lK9upFAKE/s2KPmOs0d/l/KZClqRfEpv/siXqpxZDydURfg09vwDEjo9Q==","shasum":"d2170bb2bcae4f4b629e80679082846495cb4049","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-4.0.3.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCvEy9fTneKavlYx1niuz151nwQGGUj7sXdYgktlhDl/QIgMsERHE991i7svOCild+2LG0SViE0jVd/L6KwSXJseUA="}]},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/multi-integer-range-4.0.3.tgz_1505304049916_0.5957408328540623"},"directories":{}},"4.0.4":{"name":"multi-integer-range","version":"4.0.4","description":"Parses and manipulates multiple comma-separated integer ranges (eg 1-3,8-10)","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"main":"./lib/multi-integer-range.js","typings":"./lib/multi-integer-range.d.ts","scripts":{"test":"mocha","build":"tsc","coverage":"istanbul cover _mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | coveralls","prettier":"prettier --write *.ts test/*.js"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"chai":"^4.1.0","coveralls":"^2.11.14","mocha":"^3.0.2","mocha-lcov-reporter":"^1.2.0","prettier":"^1.10.2","typescript":"~2.4.1"},"prettier":{"singleQuote":true},"runkitExampleFilename":"example.js","gitHead":"84f6abbd95fcab408424273814f57ad5878d2851","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@4.0.4","_npmVersion":"5.6.0","_nodeVersion":"9.5.0","_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"dist":{"integrity":"sha512-7DWYSsfL4ffDVf4MjneTVzg6vUvfPD3OJw5rWZD9xrf82EnBcNMcxoH/YXIx0H9/ER3LHIO/8eAlHAYxZZJA/g==","shasum":"807a6375317bda7a3176ca67c1fbac8ba4de3b11","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-4.0.4.tgz","fileCount":6,"unpackedSize":37224,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDzNTalU8YfBPT8vEK/eog4i4lHncl0zjBi6oQX+QYvAwIgPqrKWabx6a9j1Z5n23cqQwc6Q428434UmCQKqJzUVTY="}]},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/multi-integer-range_4.0.4_1518501277926_0.43809193366338905"},"_hasShrinkwrap":false},"4.0.5":{"name":"multi-integer-range","version":"4.0.5","description":"Parses and manipulates multiple comma-separated integer ranges (eg 1-3,8-10)","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"main":"./lib/multi-integer-range.js","typings":"./lib/multi-integer-range.d.ts","scripts":{"test":"jest --coverage","build":"tsc","coverage":"cat ./coverage/lcov.info | coveralls","prettier":"prettier --write *.ts *.js"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"coveralls":"^3.0.1","jest":"^23.1.0","prettier":"^1.13.5","typescript":"^2.9.2"},"prettier":{"singleQuote":true},"runkitExampleFilename":"example.js","gitHead":"a46b9fa6938d4569b992abaea7e5d1fc3b557456","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@4.0.5","_npmVersion":"6.0.0","_nodeVersion":"10.0.0","_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"dist":{"integrity":"sha512-S2b+jiCCfFhfWUoQdvEEkl2PChnVHgqAdKG/5JzG09c6qCymNtIMCxzlF3y5Ktcqe9+IFRQSXsiG9NpjDYT7lQ==","shasum":"a8a439823db3fcc0d8c4822eff2c33c7d00dd690","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-4.0.5.tgz","fileCount":7,"unpackedSize":41634,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbKI1qCRA9TVsSAnZWagAADSQQAINmTJsreW8iJU+Fe7zg\nvxguDj71vDPB5vIXG538iOTsR+/NC7jgQeuQJT74QZQVDTazYmtvVabcPh6s\ny2RgRABRN08YQvRJJZEq2gJBCzEFAiXk9hpbNONfIZNEWjOaGmBNSSuIy2UH\n6BY53uxfTkdIUIbW0Jal2hNWGwSYcQQrSiPJ3okXcrsru7FhPqhFcF94yHeI\nzuY5xazVVGWfAg8kMOwxwK5H6yump1nzc+c8MZlcYHIhLhTnicSjCQebtZPY\n5mqhXJ92g6fHCOcSYBlruKmJuqDv2iWQxHmTYOBKl5TGhP5XC0OAtA5VuqQh\nT8BU2hy8cIDzGMrrCKcISt/ZZJMIxoduFvZLNS0zeZnCDxStZeRE4NL+Qq+F\nsmmAGbERPgq+ID0skD6B/+vk/5k5zx7B4/RKaMvX4HMYzCysEOnTDsg6ZyCk\nLkiZBEhnVkczb/9BonJqPRzBJs0zXTkzlzurUF9/H+SvLQDYB2XotSuUH6Qu\nwZPNWG0HGXEEnP6rBgFIUa4HweBTX5rB/kMzIFQcGTvFoP6Xpac405pFrhDz\nocNdu8xBFQ1EMvx3B9+Yh0BrUqgL7BL8ijhGPqTgI9ypXRBr3tjq0abudXF0\nYjVig+zGhrvAVPzKISUs73ZuFF4lSqQ2/xD25lFzXmAfRPi0cEmXy3/K5tZw\n18+y\r\n=fwJO\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIE3M4jNuj9PoSvq1gla9QUCKGAU4xpyTPwqyiu/8f0OnAiEA6k0AxJuq20Uh2AoUnMIOg7c06NyF9vb5IuZ7X3snmCY="}]},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/multi-integer-range_4.0.5_1529384296510_0.1651067756406428"},"_hasShrinkwrap":false},"4.0.6":{"name":"multi-integer-range","version":"4.0.6","description":"Parses and manipulates multiple comma-separated integer ranges (eg 1-3,8-10)","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"main":"./lib/multi-integer-range.js","typings":"./lib/multi-integer-range.d.ts","scripts":{"test":"jest --coverage","build":"tsc","coverage":"cat ./coverage/lcov.info | coveralls","prettier":"prettier --write *.ts *.js"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"coveralls":"^3.0.1","jest":"^23.1.0","prettier":"^1.13.5","typescript":"^2.9.2"},"prettier":{"singleQuote":true},"runkitExampleFilename":"example.js","gitHead":"f3a791782c7eb7e4fbe15e456f8617cd5faa31d6","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@4.0.6","_npmVersion":"6.1.0","_nodeVersion":"10.5.0","_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"dist":{"integrity":"sha512-YRSQZxlM6vkkz5aDUkb58a0fJUgoGBHX1fbBugC24yHTf13zKFRGGywGsYYUA9WH41HwW2Vt033OGQ+y6OloMQ==","shasum":"0e9fdced37d86d1f7271d3b83a92d143047ea1ff","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-4.0.6.tgz","fileCount":7,"unpackedSize":41991,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbRIV/CRA9TVsSAnZWagAAxZ8P+gP8MPQUfD3Eg/TByBg8\nJfXU2aIJ60EQCRbAMVR7uW7HUWqf30jlMjXO9/p0z3ucX6AAAaEzo7HC8OhD\nU4LSWoS2qmMDqkYykxWAaGrYCoYqd/390nDMSLLsg4RvX/i+0+9fdTZuXpfe\nok5gWjWAMrNKFfPlh0EJw6oQ/+Gm9wTKFzW8mqN0lqVa+2Jxl5wUndwxTi28\n5pMD7as1vC4sA3Fs6E6QWAojJILoZGEQ/MeF32kL9h4fc0F6QEE5CKjaCS3y\nJeDZF1vZUnwmbdK87gjYflH9S5GScriWOYpxUwVkHYtCLSnAebk+xLNtIJbd\nWrl9ho87+SiGUrDy3Te8Mm93O49Eb3H51Hn40ekyzeRpu/5zmrHBU5Ko6Umr\nHoRTbeHpHnTsoTkSBmzliXcC3lopkdUzQVpPHCASOu+WlIM40qJq9dh/8Mx6\nXJ6MsgKDfegoSDgVkawP/orHoD2u1etu5sx00Z2n7YIAlGCjLGlXLpa0SZ7w\n0nGpoiWptrIfDOiLaVWc4MNSCO6zNIkI6T37LNmH70IqBwlRan2kK75BaIcX\nsn11z5/NZwkRA7BxaQEkoL1gXxfFewpTzzBsHZDjW9QrlmnBpUdNchoZ/Jpz\nlxbrjEA0Tqt8sMBfkuF5RCWRhf7WYpQPb0U7wCyb3N4HFtG5IeLHlROUBPor\nO0iv\r\n=RV0l\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEdzo8d9xeFVRaUfSBbHVJIY+ugAdHxN6EipvEFZL//SAiAdK15oFjMUu4Z1JWBVx8VnIttHMY44Sx+E66Tj6KBHXw=="}]},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/multi-integer-range_4.0.6_1531217278820_0.9887396099304515"},"_hasShrinkwrap":false},"4.0.7":{"name":"multi-integer-range","version":"4.0.7","description":"Parses and manipulates multiple comma-separated integer ranges (eg 1-3,8-10)","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"main":"./lib/multi-integer-range.js","typings":"./lib/multi-integer-range.d.ts","scripts":{"test":"jest --coverage","build":"tsc","coverage":"cat ./coverage/lcov.info | coveralls","prettier":"prettier --write *.ts *.js"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"coveralls":"^3.0.2","jest":"^23.6.0","prettier":"^1.15.2","typescript":"^3.1.6"},"prettier":{"singleQuote":true},"runkitExampleFilename":"example.js","gitHead":"bfcf11f8d6dd092a0edba0c112bb2386cabdd791","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@4.0.7","_npmVersion":"6.4.1","_nodeVersion":"10.5.0","_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"dist":{"integrity":"sha512-THuAnyKxIogrhWvHXHMEWxR90TCFcz/RHsnTcGKAOxdOMaNZSKkujOHMC2LZGMc/j+Jdf31FJcL66au/U0mS1Q==","shasum":"888e5b1c8718196f909ca2039d74a6b971cbdb98","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-4.0.7.tgz","fileCount":8,"unpackedSize":67520,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJb86BuCRA9TVsSAnZWagAAXCIP/jBT4nbbihuITPkUbuBw\nmXbU3KEuR4uKOpaMkckHA+EahpDUpECyTv7q4ZZlxCc3KFlGFKgJE3+YKM7j\nj+8pvfY+Rsqz+gV0FxLMv7Nrb7lXi294ZmTpfx89QWALT9/5K9eZ0jBpDARx\n2RrDoWOqvIRFRwTJEgGfHAdp/daUUw4dt+A1/UAIUgdiZWe5pYPhSCSVuTii\np5zZg1BjYWNJxZ0Uc5I9tCCpzAD+BKK979WhS08na7VKXXx+X74ibWRNV9GP\nRUiLs+83B/BSBjaYU2vPxcXKBvHBqPm7iKxvx5TU47ur/Kf38r/q9nPXKtqI\nmCjIW6VhQZa35MkA2bkBBN9jVZ8DRSq7rZqrztsjFUUkwi1fh3JGDALrQPu7\nrkluHThIivzXZvapf5lX3HRbzE6iEreuWSkVpVU3WwC1xSIiagTKO3ApqsHy\nDQTvdcrtrcVTqOftMxV41AnTnK6TmwF+gQw9Drya+jrYTVE/74mGKQq+r85+\nv1D3PqiDQNmlz3LPz0agaCJY+2zM2Cgt/DlbyEM1uuCOHFkgiLAIxQJkp38B\nRtrBZwY9gdLQrmDFhXI32ro5B78bbWTNCiHSg5r4XJJJn52pNSECgeA3gAbG\nKHlW9lrZFsLZCAWtPxiXSE0/OeAqBNI2OKwnu1ucanYaH8i1d5rV46kKrdqO\n4Mpd\r\n=Vgan\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQClcStYUBaKYeaB5bkx01NEu7GmQ3ldDO/SHYSH+M0ppQIhAIzsCA5zLy37rfHze7TmE6eFLRet4oYT8YNwsZADaY/2"}]},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/multi-integer-range_4.0.7_1542692973462_0.688241685356606"},"_hasShrinkwrap":false},"4.0.8":{"name":"multi-integer-range","version":"4.0.8","description":"Parses and manipulates multiple comma-separated integer ranges (eg 1-3,8-10)","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"main":"./lib/multi-integer-range.js","typings":"./lib/multi-integer-range.d.ts","scripts":{"test":"jest --coverage","build":"tsc","coverage":"cat ./coverage/lcov.info | coveralls","prettier":"prettier --write *.ts *.js"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"coveralls":"^3.0.7","jest":"^24.9.0","prettier":"^1.18.2","typescript":"^3.6.4"},"prettier":{"singleQuote":true},"runkitExampleFilename":"example.js","gitHead":"ee04fef733c00806a4d99aa96928ed10830a7fb2","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@4.0.8","_nodeVersion":"12.7.0","_npmVersion":"6.10.3","dist":{"integrity":"sha512-xlwWv8nKMpwlD0VUFLsTm5nW1zvSsCDKzBh/OfLLm7VvKe7AN0LWGIpmN/Mw3Wx2ItHtMq8oZFVBXVX9tfE3Ew==","shasum":"b204f2c7262a5ccc5481928dc207ef50b6e8e61a","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-4.0.8.tgz","fileCount":8,"unpackedSize":67768,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdsUf4CRA9TVsSAnZWagAAVs0P/Rf/gubmv10YuG8hqU1V\nsc+jZS2Eyw6Z2WmvmxGs4ftdVrtak8EJEwlzwHBqyrkdTqU06BORQ+wtpURO\nm1gB5rAjHYK7LaTMyhY3GHVpkuwCl6bqKOZQ2ogNIzHqLjtQSdCWVgYgEB75\nicaVxECXXaIHS+SEJe+CPXn697Eap8zE8huZnVqHO/Xge08C2wimkVf+kBh6\nARK7zN/mX4cwc7lohOk36LsF3vQ8NIWAFcQYBfqKnvUgoB2vIY4lx7e5iiTJ\nPJ4xAwEJOXe3qKnEa2thrWMQLV2iaecZ4KditpHIK9+yZ0No2Mbw7mrmgYWG\n3/KuYL7VTXAWYYit/UZUUcXWJUAvdikpTVSTGbGT0No6BmJig+PMFO23vPHK\n2UsoFFuHk1kx/e/2HDRCWGQXrGFwqoJF//DuFthfXXC405kINWgjHs9qBMM+\nCIMzUpXoGNAPLGiQzyQGVhnN6/1f14fz8rgIkZC4V/5shdXYY+199cbgQpua\nrIOopYqBagnmJHPRXZFJcstOkISUyIbSyuwOKVCeSZUVAR6QRcCC4kzehVtL\n0DtERyErU0MGcxDSRkx1S0L176SqRTGnVh4VCC2bOQ42B8wI2Z38DFP4PEte\nN+bLKkZg7HP/fXbbA3NUWuHricNmEMtCP9XAQ2SThrX18jMwyOGXAFbvINsl\np0sS\r\n=kHPz\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDrEnYiQ5rxQQZZ/aqyzscKzpl/2UrnYVr3oPK+U9UstQIhAI/6oChaKmhDgKCN9KvhYuy0VVCGpN7f10dlfE6nyeBH"}]},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/multi-integer-range_4.0.8_1571899383566_0.3175838885170357"},"_hasShrinkwrap":false},"4.0.9":{"name":"multi-integer-range","version":"4.0.9","description":"Parses and manipulates multiple comma-separated integer ranges (eg 1-3,8-10)","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"main":"./lib/multi-integer-range.js","typings":"./lib/multi-integer-range.d.ts","scripts":{"test":"jest --coverage","build":"tsc","coverage":"cat ./coverage/lcov.info | coveralls","prettier":"prettier --write *.ts *.js"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"coveralls":"^3.1.1","jest":"^24.9.0","prettier":"^2.3.2","typescript":"^3.6.4"},"prettier":{"singleQuote":true,"arrowParens":"avoid","trailingComma":"none"},"runkitExampleFilename":"example.js","gitHead":"0875f773dd181c6d121b7f51180e51c8bb2acfd6","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@4.0.9","_nodeVersion":"14.16.1","_npmVersion":"7.20.5","dist":{"integrity":"sha512-xjZDOdaHyF+NW3WO0HzG4hL2R/ZPzs6V7HYPJu1Qirf+Z9UgikPj/JByZHvLbCM5GJ8klL7AiwRE1BcduUMLVA==","shasum":"c0ac41e9d79dea722e8462b0b7ba85ebdaf716e8","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-4.0.9.tgz","fileCount":7,"unpackedSize":43597,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhF0kgCRA9TVsSAnZWagAA208P/2npvxFf7Y9IUWD08/Gr\neqel6TXFsgfmkiyC1LLOC+RPvCw78nqkiv6fX47+CEESS1dg1O08MXoGmRvh\n5sWi9WZinGsA+QQ1RxA9SukqNNrPpX8unMC3vTvMSpBuM+jzV9fapzuOyOFb\nVo7itmv7DRQO8U/7De4NoHdG9qUi4fKqmOeVMMGGAVjQH+/uOAnl1Qjn1hsB\n4RZNUtIsG6a9Eo+UeIuN6KgCBFg7qPW3w4OWIlNFTAERxOahYK6/e49LffSO\nMqCsAyftDdvdVyVjDzb3DOX3Jt2HOX+D936oJtV6YMuAdcc+rmXwUTo3vznw\nBav8MHYGeUQMO5slJn2+SnSwTQsIHO6qhtcKNyc2F36VUimW4VIyV01hO2Fg\n/i0yW/U6Nh7sHBw4QNOhPlB/y5Wuv5ovuHBa9rf2+Zt4d4FIt+RCwZsMpAd/\n9goKfzVI6puiVoBeLDGCnY6fT0pPYRlwfis6ty3TJwIxqcUHLqUco60IPt10\nR0myzSixEKegqiWTUswSWBWP8PELiPtonTreGKh3Y+wFzD4p1Mz4FX3J5PLe\nCsWG51Ro339mQdMpJY/20VF6Wi60pM0NtXsRqMOjiyQvehMdiBD5WSASmnoB\nfhTGXSgJozZLxWdmI4575oDzMDmnv6Y+H+z9sKtFbmSPnzMZDKoZZoD9K5E3\nu6AH\r\n=PY7D\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCpSjFZiQzNx0cWZ65QfhPNcpLjZUM5UE+BUKK+ZOeRCQIhAPrRfWhnLcst01Y2veFvFK5FGLv5DwE77xGgbD+d6Nox"}]},"_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"directories":{},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/multi-integer-range_4.0.9_1628915999757_0.18285739538223145"},"_hasShrinkwrap":false},"5.0.0-alpha.1":{"name":"multi-integer-range","version":"5.0.0-alpha.1","description":"Parses and manipulates multiple comma-separated integer ranges (eg 1-3,8-10)","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"type":"module","sideEffects":false,"main":"./lib/index.js","types":"./lib/index.d.ts","scripts":{"test":"jest --coverage","build":"tsc","prettier":"prettier --write *.ts *.js"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"@types/jest":"^26.0.24","jest":"^27.0.6","prettier":"^2.3.2","ts-jest":"^27.0.4","typescript":"^4.3.5"},"prettier":{"singleQuote":true,"arrowParens":"avoid","trailingComma":"none"},"runkitExampleFilename":"example.js","gitHead":"88381c594fb05097b57f239ea416341154ecf667","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@5.0.0-alpha.1","_nodeVersion":"14.16.1","_npmVersion":"7.20.5","dist":{"integrity":"sha512-fBbC8f5oS/pcfMqn/KuZ/zVGwXI2MDCd1By2+LBJkbXkZwfpU9tRJDC21OOwwLXRVpySYN6ZtfYUoAT8Vp2Bog==","shasum":"d07c5b22c21e4153e946aa8958ee1522d498bff2","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-5.0.0-alpha.1.tgz","fileCount":11,"unpackedSize":48921,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhGOUDCRA9TVsSAnZWagAAwIkQAIDytD94pSW5dYAqqs4Z\nWS1D6yAPiD4Hcnw3MMRmum8FDLU4CG/jBLtt8fKUzTdjACvj7L2vKXrSx/e0\nhxlDJp+P7j/r5FlVtQAQaOv/ECjFjI8unLQGoQVbRHCldD2HX99QfXnUEAPE\nBLZ3v9+sQ7/8mb1jm+sXnPe4UtW2hHEcG5c5KsClhFAQUQOr4GdKZKI90Im7\nyiu/vkAv4ahfahVdU/1iJDmNM8Ca5wJDWegGTUoGvU9I+fnSMuJVbRgtF7nM\nuC2U0yaYoyYGas4LldvHgEArzJaSNRLIed4qlhIAxypCYI2iWvAJG/1iwAc1\nEMRyscCaOtfQBSPkookTOEqDTJUaU3Fwe3nW4CvAuNnx4V4Wd8P/9ycHNugM\n+a1Lq2xc8Wn6Y10ypJJd8a8/efdlU2d90CQaGYptd6ph60vFDU/zqWVsfTGK\nOffi0n4EAU32UwnYR9XoHJosCNqfOJLMLbaVOiiGjZ6WXGu/Qo9kC/kb/HVG\nBGqY0R7jFnEAXQX1R3LiafUcxQNDIQCxEnJx5OZ8wcaJ1lQdtrzRyw08FQkI\nJ76t2wQPf6rHWA0awrX+SMnjreQWK3erK2aClxF7vNwP7HQd5pmul1rOt0cm\nqd7g6wobSH2YkzVk+pZ35W51HSc+MvcgUqjhEIukYM3HuT4q+vNHgD75qqq6\nEWsa\r\n=0j3d\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICEo6vO3NArviL/R9y54rhHdfa4ghCqvGHoCEEznSt10AiA87WFl3gCjgpmUlKEs1BXfYuv8J0uP2/Eb9bgho0EFqA=="}]},"_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"directories":{},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/multi-integer-range_5.0.0-alpha.1_1629021443710_0.7797823412027116"},"_hasShrinkwrap":false},"5.0.0-alpha.2":{"name":"multi-integer-range","version":"5.0.0-alpha.2","description":"Parses and manipulates multiple comma-separated integer ranges (eg 1-3,8-10)","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"type":"module","sideEffects":false,"main":"./lib/index.js","types":"./lib/index.d.ts","scripts":{"test":"jest --coverage","build":"tsc","prettier":"prettier --write *.ts *.js"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"@types/jest":"^26.0.24","jest":"^27.0.6","prettier":"^2.3.2","ts-jest":"^27.0.4","typescript":"^4.3.5"},"prettier":{"singleQuote":true,"arrowParens":"avoid","trailingComma":"none"},"runkitExampleFilename":"example.js","readme":"# multi-integer-range\n\n[![Build Status](https://github.com/smikitky/node-multi-integer-range/actions/workflows/tests.yml/badge.svg)](https://github.com/smikitky/node-multi-integer-range/actions)\n[![Coverage Status](https://coveralls.io/repos/github/smikitky/node-multi-integer-range/badge.svg?branch=dev)](https://coveralls.io/github/smikitky/node-multi-integer-range)\n[![npm version](https://badge.fury.io/js/multi-integer-range.svg)](https://badge.fury.io/js/multi-integer-range)\n\nA small library that parses comma-delimited integer ranges (such as `\"1-3,8-10\"`) and manipulates such range data. This type of data is commonly used to specify which lines to highlight or which pages to print.\n\nSupported operations:\n\n- Addition (e.g., `1-2,6` + `3-5` &rarr; `1-6`)\n- Subtraction (e.g., `1-10` - `5-9` &rarr; `1-4,10`)\n- Inclusion check (e.g., `3,7-9` &sub; `1-10`)\n- Intersection (e.g., `1-5` &cap; `2-8` &rarr; `2-5`)\n- Unbounded ranges (e.g., `5-`, meaning \"all integers &ge; 5\")\n- Ranges including negative integers or zero\n- ES6 iterator (`for ... of`, spread operator)\n- Array creation (\"flatten\")\n\nInternal data are always _sorted and normalized_ to the smallest possible representation.\n\n## Install\n\nFirst, choose the right version you need. The API style has changed drastically in version 5. The new API is slightly more verbose but fully tree-shakable.\n\n|                   | 4.x                  | 5.x (alpha)           |\n| ----------------- | -------------------- | --------------------- |\n| API               | Class-based          | Function-based        |\n| ES version        | Downpiled to ES5     | ES2016                |\n| Module system     | CommonJS             | ESM (Tree-shakable❤️) |\n| Immutability      | Mutable method chain | Pure functions only❤️ |\n| Supported runtime | Works even on IE     | See below             |\n\nSupported runtime for version 5.x:\n\n- Node >= 10: If you're consuming this module via modern preprocessors like Webpack or tsc\n- Node >= 14: If you want to `import` the module natively\n- Deno: (haven't checked, should work via unpkg)\n\nVersion 5.x should be fine for most modern development environments, but if you feel you are not ready yet, feel free to use 4.x, which is stable and has no known major bugs.\n\nInstall via npm or yarn:\n\n```\nnpm install multi-integer-range@5\n```\n\nModern browsers can directly load this package as a standard ES module via CDN:\n\n```html\n<script type=\"module\">\n  import mr as * from 'https://unpkg.com/multi-integer-range@5/lib/fp.js';\n  console.log(mr.parse('7,6,5'));\n</script>\n```\n\n## Basic Example\n\n> **The following is the documentation for version 5, which is still in alpha. [Go to the docs for version 4](https://github.com/smikitky/node-multi-integer-range/tree/v4.0.9)**\n\n<!-- prettier-ignore -->\n```js\nimport * as mr from 'multi-integer-range';\n\nconst ranges1 = mr.parse('1-6,9-12'); // [[1, 6], [9, 12]]\nconst ranges2 = mr.parse('7-10,100'); // [[7, 10], [100, 100]]\nconst ranges3 = mr.normalize([1, 5, 6, [4, 2]]); // [[1, 6]]\n\nconst sum = mr.append(ranges1, ranges2); // [[1, 12], [100, 100]]\nconst diff = mr.subtract(ranges1, ranges2); // [[1, 6], [11, 12]]\nconst commonValues = mr.intersect(ranges1, ranges2); // [[9, 10]]\n\nconst str = mr.stringify(sum); // \"1-12,100\"\nconst bool = mr.has(range1, ranges3); // true\nconst isSame = mr.equals(range1, range2); // false\nconst array = mr.flatten(ranges3); // [1, 2, 3, 4, 5, 6]\nconst len = mr.length(ranges1); // 10\n```\n\n## Creating a _normalized_ MultiIntegerRange\n\nThe fundamental data structure of this module is a **normalized** read-only array of `[min, max]` tuples, as shown in the following TypeScript definition. In other words, just an array of 2-element number arrays. Here, \"normalized\" means the range data is in the smallest possible representation and is sorted in ascending order.\n\n<!-- prettier-ignore -->\n```ts\ntype Range = readonly [min: number, max: number];\ntype MultiIntegerRange = readonly Range[];\ntype MIR = MultiIntegerRange; // short alias\n\n// Examples of normalized MultiIntegerRanges\n[[1, 3], [4, 4], [7, 10]]\n[[-Infinity, -5], [-1, 0], [3, 3], [9, Infinity]]\n[[-Infinity, Infinity]]\n\n// These are NOT normalized MultiIntegerRanges\n[[3, 1]] // min is larger than max\n[[7, 9], [1, 4]] // not in the ascending order\n[[1, 5], [3, 7]] // there is an overlap\n[[1, 2], [3, 4]] // the two ranges can be combined to \"1-4\"\n[[Infinity, Infinity]] // makes no sense\n```\n\nMost functions expect one or more **normalized** MultiIntegerRanges as shown above to work correctly. To produce a valid normalized MultiIntegerRange, you can use `normalize()` or `parse()`.\n\n`normalize(data?: number | (number | Range)[])` creates a normalized MultiIntegerRange from a single number or an unsorted array of numbers/Ranges. Importantly, `normalize()` is the only function that can safely take an unsorted array. Do not pass un-normalized range data to other functions.\n\n<!-- prettier-ignore -->\n```ts\nconsole.log(mr.normalize(10)); // [[10, 10]]\nconsole.log(mr.normalize([3, 1, 2, 4, 5])); // [[1, 5]]\nconsole.log(mr.normalize([5, [2, 0], 6])); // [[0, 2], [5, 6]]\nconsole.log(mr.normalize([7, 7, 7, 7, 10])); // [[7, 7], [10, 10]]\nconsole.log(mr.normalize()); // []\n\n// Do not pass un-normalized data to functions other than normalize().\nconst unsorted = [[3, 1], [2, 8]];\nconst wrong = mr.length(unsorted); // DON'T! This won't work!\nconst correct = mr.length(mr.normalize(unsorted)); // 8\n```\n\n`parse(data: string, options?: Options)` creates a normalized MultiIntegerRange from a string. The string parser is permissive and accepts space characters before/after comma/hyphens. It calls `normalize()` under the hood, so the order is not important, and overlapped numbers are silently ignored.\n\n```ts\nconsole.log(mr.parse('1-3,10')); // [[1, 3], [10, 10]]\nconsole.log(mr.parse('3,\\t8-3,2,3,\\n10, 9 - 7 ')); // [[2, 10]]\n```\n\nBy default, the string parser does not try to parse unbounded ranges or negative integers. You need to pass an `options` object to modify the parsing behavior. To avoid ambiguity, all negative integers must always be enclosed in parentheses (sorry for the wacky syntax, but it's always possible to make your custom parsing function if you prefer another syntax).\n\n```ts\nconsole.log(mr.parse('7-')); // throws a SyntaxError\n\nconsole.log(mr.parse('7-', { parseUnbounded: true })); // [[7, Infinity]]\nconsole.log(mr.parse('(-7)-(-1)', { parseNegative: true })); // [[-7, -1]]\nconsole.log(\n  mr.parse('0-,(-6)-(-2),-(-100)', {\n    parseUnbounded: true,\n    parseNegative: true\n  })\n); // [[-Infinity, -100], [-6, -2], [0, Infinity]]\n```\n\n## API\n\nAll functions are \"pure\", and exported as named exports. They do not change the input data nor do they have any side effects. All MultiIntegerRange's returned by these functions are normalized. `MIR` is just a short alias for `MultiIntegerRange` (available in d.ts).\n\n- `parse(data: string, options?: Options): MIR` Parses the given string.\n- `normalize(data?: number | (number | Range)[]): MIR` Normalizes the given number or the array of numbers/Ranges.\n- `append(a: MIR, b: MIR): MIR` Appends the two values.\n- `subtract(a: MIR, b: MIR): MIR` Subtracts `b` from `a`.\n- `intersect(a: MIR, b: MIR): MIR` Calculates the interesction, i.e., integers that belong to both `a` and `b`.\n- `has(a: MIR, b: MIR): boolean` Checks if `b` is a subset of `a`.\n- `length(data: MIR): number` Calculates how many numbers are effectively included in the given data (i.e., 5 for '3,5-7,9'). Returns Inifnity for unbounded ranges.\n- `equals(a: MIR, b: MIR): boolean` Checks if `a` and `b` contains the same range data.\n- `isUnbounded(data: MIR): boolean` Returns true if the instance is unbounded.\n- `min(data: MIR): number | undefined` Returns the minimum integer. May return -Infinity.\n- `max(data: MIR): number | undefined` Returns the maxinum integer. May return Infinity.\n- `tail(data: MIR): MIR` Removes the minimum integer.\n- `init(data: MIR): MIR` Removes the maxinum integer.\n- `stringify(data: MIR): string` Returns the string respresentation of the given data (the opposite of parse()).\n- `flatten(data: MIR): number[]` Builds a flat array of integers. This may be slow and memory-consuming for large ranges such as '1-10000'.\n- `iterate(data: MIR): Iterable<number>` Returns an ES6 iterable object. See the description below.\n\nAvailable `options` that can be passed to `parse()`:\n\n- `parseNegative` (boolean, default = false): Enables parsing negative ranges (e.g., `(-10)-(-3)`).\n- `parseUnbounded` (boolean, default = false): Enables parsing unbounded ranges (e.g., `-5,10-`).\n\n## Iteration\n\nSince `MultiIntegerRange` is just an array of `Range`s, if you naively iterate over it (e.g., in a for-of loop), you'll simply get each `Range` tuple one by one. To iterate each integer contained in the `MultiIntegerRange` instead, use `iterate()` like so:\n\n```js\nconst ranges = mr.parse('2,5-7');\n\nfor (const page of mr.iterate(ranges)) {\n  console.log(page);\n} // prints 2, 5, 6 and 7\n\n// array spreading (alternative of flatten())\nconst arr1 = [...mr.iterate(ranges)]; //=> [2, 5, 6, 7]\nconst arr2 = Array.from(mr.iterate(ranges)); //=> [2, 5, 6, 7]\n```\n\n## Tip\n\n### Combine Intersection and Unbounded Ranges\n\nIntersection is especially useful to \"trim\" unbounded ranges.\n\n```ts\nconst userInput = '-5,7-';\nconst pagesInMyDoc = [[1, 100]]; // '1-100'\nconst pagesToPrint = mr.intersect(\n  mr.parse(userInput, { parseUnbounded: true }),\n  pagesInMyDoc\n);\nconsole.log(mr.stringify(pagesToPrint)); // '1-5,7-100'\n```\n\n## Legacy Classe-based API\n\nFor compatibility purposes, version 5.x still exports the `MultiRange` class and `multirange` function, which is mostly compatible with the 4.x API but uses the new functional API under the hood. See the [4.x documentation](https://github.com/smikitky/node-multi-integer-range/tree/v4.0.9) for the usage. The use of this compatibility layer is discouraged because it is not tree-shakable and has no performance merit. Use this only during migration.\n\n## Changelog\n\nSee [CHANGELOG.md](CHANGELOG.md).\n\n## Caveats\n\n**Performance Considerations**: This library works efficiently for large ranges\nas long as they're _mostly_ continuous (e.g., `1-10240000,20480000-50960000`). However, this library is not intended to be efficient with a heavily fragmented set of integers that are scarcely continuous (e.g., random 10000 integers between 1 to 1000000).\n\n**No Integer Type Checks**: Make sure you are not passing floating-point `number`s\nto this library. For example, don't do `normalize(3.14)`. For performance reasons, the library does not check if a passed number is an integer. Passing a float will result in unexpected and unrecoverable behavior.\n\n## Development\n\n### Building and Testing\n\n```\nnpm install\nnpm run build\nnpm test\n```\n\n### Bugs\n\nPlease report any bugs and suggestions using GitHub issues.\n\n## Author\n\nSoichiro Miki (https://github.com/smikitky)\n\n## License\n\nMIT\n","readmeFilename":"README.md","gitHead":"58a37c05700d5d05a9e0d958edf71b0d4dc388eb","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@5.0.0-alpha.2","_nodeVersion":"14.16.1","_npmVersion":"7.20.5","dist":{"integrity":"sha512-TF2448s4lZdk4NYaLazmHHAfQV+pWtd+Wb9/QY2x/hnID+S7iIizBoY4pEnm70ol2AfeVKS+92i4b4iryTcQsA==","shasum":"cde88d648ec4084ba9881a2fbf6503c1729c4bda","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-5.0.0-alpha.2.tgz","fileCount":11,"unpackedSize":49009,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhGOreCRA9TVsSAnZWagAAlNkQAJyyN4AV/ygcEv1X5/wX\n2nu8aGbQUyCsuwiBrYeLUsuw2HF2dp0bxsKflnPBYFho+Kpvqs+pIT/3rmbQ\n6vyGi8BhHou2T6qjC8Pmxrzq/tG3WAsRZlzcwsGNSHZc7sBff4kCA4m6miI5\no9YVW/4EGghvJp8nArMajXH7//yYTqCH+mSzMOupSAiVct8ebCjHLWFoNnJK\n5lOYiiXtnwLZoQkdneQny1MQKN5pbwT/+MTfLwwRXGZqVrgT0c7Wseaf2vV+\nk6d428Ks9ALwNy+wHxLm3bKx9tdkMW60hFeYF53T16xknX5w5iZ3MmOJgYNA\nLVhr22+bVnVU0tgRszz/PR0VleCWtocKjWJBm5A2STOdEFNH38OlTTb1NJro\nun1sSrUDhDCFTxDPOHaoaSTIktqHpWKtXrnXYgVG8oBa1cj20uFhxX5Agzh9\n/ouziV/suHaQge0u6F/qOBtyUeEnx221tcu6FUEv9+Ym7HhoFuyiPbV+56ua\nDa43bxO3jeubeOvi8PDvr1Cluo0R46pIUAwG7oWX6gtIQSZg2hvtQfb0bJ7h\n35PV+istzOZwX7OlzZEWLGoWpGP3VngAyV6+155+04Fypv4ErJQePHUZ74nP\ng4XqLrkkfAadnGS+RpQXj1ypsKe7g3oxHQH7UiLMi9GP/t60Fjgat01RPM/7\nXIot\r\n=rQbh\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCz+9gky8m9WrNv/bxF7nx+yMOXzDHPts0Hu/mjQGMRRQIgW2vSu8AOciSalAwSQW22OdkP1VFX+hy50KGx/FXPTSM="}]},"_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"directories":{},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/multi-integer-range_5.0.0-alpha.2_1629022942105_0.5195250903863624"},"_hasShrinkwrap":false},"5.0.0-alpha.3":{"name":"multi-integer-range","version":"5.0.0-alpha.3","description":"Parses and manipulates multiple comma-separated integer ranges (eg 1-3,8-10)","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"type":"module","sideEffects":false,"main":"./lib/index.js","types":"./lib/index.d.ts","scripts":{"test":"jest --coverage","build":"tsc","prettier":"prettier --write *.ts *.js"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"@types/jest":"^26.0.24","jest":"^27.0.6","jest-ts-webcompat-resolver":"^1.0.0","prettier":"^2.3.2","ts-jest":"^27.0.4","typescript":"^4.3.5"},"prettier":{"singleQuote":true,"arrowParens":"avoid","trailingComma":"none"},"runkitExampleFilename":"example.js","readme":"# multi-integer-range\n\n[![Build Status](https://github.com/smikitky/node-multi-integer-range/actions/workflows/tests.yml/badge.svg)](https://github.com/smikitky/node-multi-integer-range/actions)\n[![Coverage Status](https://coveralls.io/repos/github/smikitky/node-multi-integer-range/badge.svg?branch=dev)](https://coveralls.io/github/smikitky/node-multi-integer-range)\n[![npm version](https://badge.fury.io/js/multi-integer-range.svg)](https://badge.fury.io/js/multi-integer-range)\n\nA small library that parses comma-delimited integer ranges (such as `\"1-3,8-10\"`) and manipulates such range data. This type of data is commonly used to specify which lines to highlight or which pages to print.\n\nSupported operations:\n\n- Addition (e.g., `1-2,6` + `3-5` &rarr; `1-6`)\n- Subtraction (e.g., `1-10` - `5-9` &rarr; `1-4,10`)\n- Inclusion check (e.g., `3,7-9` &sub; `1-10`)\n- Intersection (e.g., `1-5` &cap; `2-8` &rarr; `2-5`)\n- Unbounded ranges (e.g., `5-`, meaning \"all integers &ge; 5\")\n- Ranges including negative integers or zero\n- ES6 iterator (`for ... of`, spread operator)\n- Array creation (\"flatten\")\n\nInternal data are always _sorted and normalized_ to the smallest possible representation.\n\n## Install\n\nFirst, choose the right version you need. The API style has changed drastically in version 5. The new API is slightly more verbose but fully tree-shakable.\n\n|                   | 4.x                  | 5.x (alpha)           |\n| ----------------- | -------------------- | --------------------- |\n| API               | Class-based          | Function-based        |\n| ES version        | Downpiled to ES5     | ES2016                |\n| Module system     | CommonJS             | ESM (Tree-shakable❤️) |\n| Immutability      | Mutable method chain | Pure functions only❤️ |\n| Supported runtime | Works even on IE     | See below             |\n\nSupported runtime for version 5.x:\n\n- Node >= 10: If you're consuming this module via modern preprocessors like Webpack or tsc\n- Node >= 14: If you want to `import` the module natively\n- Deno: (haven't checked, should work via unpkg)\n\nVersion 5.x should be fine for most modern development environments, but if you feel you are not ready yet, feel free to use 4.x, which is stable and has no known major bugs.\n\nInstall via npm or yarn:\n\n```\nnpm install multi-integer-range@5\n```\n\nModern browsers can directly load this package as a standard ES module via CDN:\n\n```html\n<script type=\"module\">\n  import mr as * from 'https://unpkg.com/multi-integer-range@5/lib/fp.js';\n  console.log(mr.parse('7,6,5'));\n</script>\n```\n\n## Basic Example\n\n> **The following is the documentation for version 5, which is still in alpha. [Go to the docs for version 4](https://github.com/smikitky/node-multi-integer-range/tree/v4.0.9)**\n\n<!-- prettier-ignore -->\n```js\nimport * as mr from 'multi-integer-range';\n\nconst ranges1 = mr.parse('1-6,9-12'); // [[1, 6], [9, 12]]\nconst ranges2 = mr.parse('7-10,100'); // [[7, 10], [100, 100]]\nconst ranges3 = mr.normalize([1, 5, 6, [4, 2]]); // [[1, 6]]\n\nconst sum = mr.append(ranges1, ranges2); // [[1, 12], [100, 100]]\nconst diff = mr.subtract(ranges1, ranges2); // [[1, 6], [11, 12]]\nconst commonValues = mr.intersect(ranges1, ranges2); // [[9, 10]]\n\nconst str = mr.stringify(sum); // \"1-12,100\"\nconst bool = mr.has(range1, ranges3); // true\nconst isSame = mr.equals(range1, range2); // false\nconst array = mr.flatten(ranges3); // [1, 2, 3, 4, 5, 6]\nconst len = mr.length(ranges1); // 10\n```\n\n## Creating a _normalized_ MultiIntegerRange\n\nThe fundamental data structure of this module is a **normalized** read-only array of `[min, max]` tuples, as shown in the following TypeScript definition. In other words, just an array of 2-element number arrays. Here, \"normalized\" means the range data is in the smallest possible representation and is sorted in ascending order.\n\n<!-- prettier-ignore -->\n```ts\ntype Range = readonly [min: number, max: number];\ntype MultiIntegerRange = readonly Range[];\ntype MIR = MultiIntegerRange; // short alias\n\n// Examples of normalized MultiIntegerRanges\n[[1, 3], [4, 4], [7, 10]]\n[[-Infinity, -5], [-1, 0], [3, 3], [9, Infinity]]\n[[-Infinity, Infinity]]\n\n// These are NOT normalized MultiIntegerRanges\n[[3, 1]] // min is larger than max\n[[7, 9], [1, 4]] // not in the ascending order\n[[1, 5], [3, 7]] // there is an overlap\n[[1, 2], [3, 4]] // the two ranges can be combined to \"1-4\"\n[[Infinity, Infinity]] // makes no sense\n```\n\nMost functions expect one or more **normalized** MultiIntegerRanges as shown above to work correctly. To produce a valid normalized MultiIntegerRange, you can use `normalize()` or `parse()`.\n\n`normalize(data?: number | (number | Range)[])` creates a normalized MultiIntegerRange from a single number or an unsorted array of numbers/Ranges. Importantly, `normalize()` is the only function that can safely take an unsorted array. Do not pass un-normalized range data to other functions.\n\n<!-- prettier-ignore -->\n```ts\nconsole.log(mr.normalize(10)); // [[10, 10]]\nconsole.log(mr.normalize([3, 1, 2, 4, 5])); // [[1, 5]]\nconsole.log(mr.normalize([5, [2, 0], 6])); // [[0, 2], [5, 6]]\nconsole.log(mr.normalize([7, 7, 7, 7, 10])); // [[7, 7], [10, 10]]\nconsole.log(mr.normalize()); // []\n\n// Do not pass un-normalized data to functions other than normalize().\nconst unsorted = [[3, 1], [2, 8]];\nconst wrong = mr.length(unsorted); // DON'T! This won't work!\nconst correct = mr.length(mr.normalize(unsorted)); // 8\n```\n\n`parse(data: string, options?: Options)` creates a normalized MultiIntegerRange from a string. The string parser is permissive and accepts space characters before/after comma/hyphens. It calls `normalize()` under the hood, so the order is not important, and overlapped numbers are silently ignored.\n\n```ts\nconsole.log(mr.parse('1-3,10')); // [[1, 3], [10, 10]]\nconsole.log(mr.parse('3,\\t8-3,2,3,\\n10, 9 - 7 ')); // [[2, 10]]\n```\n\nBy default, the string parser does not try to parse unbounded ranges or negative integers. You need to pass an `options` object to modify the parsing behavior. To avoid ambiguity, all negative integers must always be enclosed in parentheses (sorry for the wacky syntax, but it's always possible to make your custom parsing function if you prefer another syntax).\n\n```ts\nconsole.log(mr.parse('7-')); // throws a SyntaxError\n\nconsole.log(mr.parse('7-', { parseUnbounded: true })); // [[7, Infinity]]\nconsole.log(mr.parse('(-7)-(-1)', { parseNegative: true })); // [[-7, -1]]\nconsole.log(\n  mr.parse('0-,(-6)-(-2),-(-100)', {\n    parseUnbounded: true,\n    parseNegative: true\n  })\n); // [[-Infinity, -100], [-6, -2], [0, Infinity]]\n```\n\n## API\n\nAll functions are \"pure\", and exported as named exports. They do not change the input data nor do they have any side effects. All MultiIntegerRange's returned by these functions are normalized. `MIR` is just a short alias for `MultiIntegerRange` (available in d.ts).\n\n- `parse(data: string, options?: Options): MIR` Parses the given string.\n- `normalize(data?: number | (number | Range)[]): MIR` Normalizes the given number or the array of numbers/Ranges.\n- `append(a: MIR, b: MIR): MIR` Appends the two values.\n- `subtract(a: MIR, b: MIR): MIR` Subtracts `b` from `a`.\n- `intersect(a: MIR, b: MIR): MIR` Calculates the interesction, i.e., integers that belong to both `a` and `b`.\n- `has(a: MIR, b: MIR): boolean` Checks if `b` is a subset of `a`.\n- `length(data: MIR): number` Calculates how many numbers are effectively included in the given data (i.e., 5 for '3,5-7,9'). Returns Inifnity for unbounded ranges.\n- `equals(a: MIR, b: MIR): boolean` Checks if `a` and `b` contains the same range data.\n- `isUnbounded(data: MIR): boolean` Returns true if the instance is unbounded.\n- `min(data: MIR): number | undefined` Returns the minimum integer. May return -Infinity.\n- `max(data: MIR): number | undefined` Returns the maxinum integer. May return Infinity.\n- `tail(data: MIR): MIR` Removes the minimum integer.\n- `init(data: MIR): MIR` Removes the maxinum integer.\n- `stringify(data: MIR): string` Returns the string respresentation of the given data (the opposite of parse()).\n- `flatten(data: MIR): number[]` Builds a flat array of integers. This may be slow and memory-consuming for large ranges such as '1-10000'.\n- `iterate(data: MIR): Iterable<number>` Returns an ES6 iterable object. See the description below.\n\nAvailable `options` that can be passed to `parse()`:\n\n- `parseNegative` (boolean, default = false): Enables parsing negative ranges (e.g., `(-10)-(-3)`).\n- `parseUnbounded` (boolean, default = false): Enables parsing unbounded ranges (e.g., `-5,10-`).\n\n## Iteration\n\nSince `MultiIntegerRange` is just an array of `Range`s, if you naively iterate over it (e.g., in a for-of loop), you'll simply get each `Range` tuple one by one. To iterate each integer contained in the `MultiIntegerRange` instead, use `iterate()` like so:\n\n```js\nconst ranges = mr.parse('2,5-7');\n\nfor (const page of mr.iterate(ranges)) {\n  console.log(page);\n} // prints 2, 5, 6 and 7\n\n// array spreading (alternative of flatten())\nconst arr1 = [...mr.iterate(ranges)]; //=> [2, 5, 6, 7]\nconst arr2 = Array.from(mr.iterate(ranges)); //=> [2, 5, 6, 7]\n```\n\n## Tip\n\n### Combine Intersection and Unbounded Ranges\n\nIntersection is especially useful to \"trim\" unbounded ranges.\n\n```ts\nconst userInput = '-5,7-';\nconst pagesInMyDoc = [[1, 100]]; // '1-100'\nconst pagesToPrint = mr.intersect(\n  mr.parse(userInput, { parseUnbounded: true }),\n  pagesInMyDoc\n);\nconsole.log(mr.stringify(pagesToPrint)); // '1-5,7-100'\n```\n\n## Legacy Classe-based API\n\nFor compatibility purposes, version 5.x still exports the `MultiRange` class and `multirange` function, which is mostly compatible with the 4.x API but uses the new functional API under the hood. See the [4.x documentation](https://github.com/smikitky/node-multi-integer-range/tree/v4.0.9) for the usage. The use of this compatibility layer is discouraged because it is not tree-shakable and has no performance merit. Use this only during migration.\n\n## Changelog\n\nSee [CHANGELOG.md](CHANGELOG.md).\n\n## Caveats\n\n**Performance Considerations**: This library works efficiently for large ranges\nas long as they're _mostly_ continuous (e.g., `1-10240000,20480000-50960000`). However, this library is not intended to be efficient with a heavily fragmented set of integers that are scarcely continuous (e.g., random 10000 integers between 1 to 1000000).\n\n**No Integer Type Checks**: Make sure you are not passing floating-point `number`s\nto this library. For example, don't do `normalize(3.14)`. For performance reasons, the library does not check if a passed number is an integer. Passing a float will result in unexpected and unrecoverable behavior.\n\n## Development\n\n### Building and Testing\n\n```\nnpm install\nnpm run build\nnpm test\n```\n\n### Bugs\n\nPlease report any bugs and suggestions using GitHub issues.\n\n## Author\n\nSoichiro Miki (https://github.com/smikitky)\n\n## License\n\nMIT\n","readmeFilename":"README.md","gitHead":"640635e2f875089ca3f734b0e475d00355972188","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@5.0.0-alpha.3","_nodeVersion":"14.16.1","_npmVersion":"7.20.5","dist":{"integrity":"sha512-l+5h7dD3T/u/adBYm7Jyb8EbbghbQjPRJvbk19pPKYMmLwtgOKzgDhZvCjiwP0FaN7+NR/YfBTENQQJmoE6kWQ==","shasum":"50b837e197784403363dd309ab1fecb8909d2508","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-5.0.0-alpha.3.tgz","fileCount":11,"unpackedSize":49053,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhGPG9CRA9TVsSAnZWagAA/UYP/094QKs7qSUwpgpaj6xK\nN+C++BpCrE3Kjho2f7yKOJE8Z9bEm6gbAuVMBmQk6gGSKnivpRcJyr8O9X+9\n3UPBv1vTodlb0iyF6Y2VWaFQ+yg+4jTSIxL12beTH2Rdq1fEuS93nT/QSAyk\nk9xgxrfFwCCaCKJNooNLQCq3y8g6kVgKcviDrZKHfO/zlCnKilREr2dK3+xU\n1GAhLwDFKbZ2asxptTaM9QvLHzTiQa5BcWSCAk+2jVRGuh9TAH2iwCeI8Ljd\nXHkm8SjQ9rJfOjjt8e2GQH7cteModKuXBPALST4NLzGk1Pv/1GzL0ImJlnmW\nywRTiyW30DCev6zxQoNXo4+I4E5wjKe62jxP9ieKR7IAIQeTqlkeaOsbLUTJ\n1wjqWl2R7jHk+EudYybq1/7OgGWlRmiSAABnyqhiKPAsTReBPtPR9bV5GTOY\ny03f/f6nkmDcuTwX/np2lnW01lIt3TgnEkmPzGgej+iXEYxGa4tT7WZq/iyA\neUbgL/5wGVeC5AaR8bvB+pWhu89burwQSQguXU74BAEL7xFVh3WKtJa+B+Qk\nax0Ym+oDL8vxm6Ou37bs8y9kI8Tc8JTr9ZAuB4SIrCx1m33J2wPpyQPol+zD\nj9l7PYpmjL7bUHlmFg7ABLuYRdYOwi1bM7RQ18rx8EQE3jsYTESvVRrCc9Wn\nnGHQ\r\n=HTUn\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCmPLKv4zqE3us1kO8PPi7erukrBh6KQK0QNHI6w4g53QIgS9LogbspS3lbinoBQ0fPGIbhKpE78mOriUER/5XGCR4="}]},"_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"directories":{},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/multi-integer-range_5.0.0-alpha.3_1629024701027_0.6065807647169297"},"_hasShrinkwrap":false},"5.0.0-alpha.4":{"name":"multi-integer-range","version":"5.0.0-alpha.4","description":"Parses and manipulates multiple comma-separated integer ranges (eg 1-3,8-10)","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"type":"module","sideEffects":false,"main":"./lib/index.js","types":"./lib/index.d.ts","scripts":{"test":"jest --coverage","build":"tsc","prettier":"prettier --write *.ts *.js"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"@types/jest":"^26.0.24","jest":"^27.0.6","jest-ts-webcompat-resolver":"^1.0.0","prettier":"^2.3.2","ts-jest":"^27.0.4","typescript":"^4.3.5"},"prettier":{"singleQuote":true,"arrowParens":"avoid","trailingComma":"none"},"runkitExampleFilename":"example.js","readme":"# multi-integer-range\n\n[![Build Status](https://github.com/smikitky/node-multi-integer-range/actions/workflows/tests.yml/badge.svg)](https://github.com/smikitky/node-multi-integer-range/actions)\n[![Coverage Status](https://coveralls.io/repos/github/smikitky/node-multi-integer-range/badge.svg?branch=dev)](https://coveralls.io/github/smikitky/node-multi-integer-range)\n[![npm version](https://badge.fury.io/js/multi-integer-range.svg)](https://badge.fury.io/js/multi-integer-range)\n\nA small library that parses comma-delimited integer ranges (such as `\"1-3,8-10\"`) and manipulates such range data. This type of data is commonly used to specify which lines to highlight or which pages to print.\n\nSupported operations:\n\n- Addition (e.g., `1-2,6` + `3-5` &rarr; `1-6`)\n- Subtraction (e.g., `1-10` - `5-9` &rarr; `1-4,10`)\n- Inclusion check (e.g., `3,7-9` &sub; `1-10`)\n- Intersection (e.g., `1-5` &cap; `2-8` &rarr; `2-5`)\n- Unbounded ranges (e.g., `5-`, meaning \"all integers &ge; 5\")\n- Ranges including negative integers or zero\n- ES6 iterator (`for ... of`, spread operator)\n- Array creation (\"flatten\")\n\nInternal data are always _sorted and normalized_ to the smallest possible representation.\n\n## Install\n\nFirst, choose the right version you need. The API style has changed drastically in version 5. The new API is slightly more verbose but fully tree-shakable.\n\n|                   | 4.x                  | 5.x (alpha)           |\n| ----------------- | -------------------- | --------------------- |\n| API               | Class-based          | Function-based        |\n| ES version        | Downpiled to ES5     | ES2016                |\n| Module system     | CommonJS             | ESM (Tree-shakable❤️) |\n| Immutability      | Mutable method chain | Pure functions only❤️ |\n| Supported runtime | Works even on IE     | See below             |\n\nSupported runtime for version 5.x:\n\n- Node >= 10: If you're consuming this module via modern preprocessors like Webpack or tsc\n- Node >= 14: If you want to `import` the module natively\n- Deno: (haven't checked, should work via unpkg)\n\nVersion 5.x should be fine for most modern development environments, but if you feel you are not ready yet, feel free to use 4.x, which is stable and has no known major bugs.\n\nInstall via npm or yarn:\n\n```\nnpm install multi-integer-range@5\n```\n\nModern browsers can directly load this package as a standard ES module via CDN:\n\n```html\n<script type=\"module\">\n  import mr as * from 'https://unpkg.com/multi-integer-range@5/lib/fp.js';\n  console.log(mr.parse('7,6,5'));\n</script>\n```\n\n## Basic Example\n\n> **The following is the documentation for version 5, which is still in alpha. [Go to the docs for version 4](https://github.com/smikitky/node-multi-integer-range/tree/v4.0.9)**\n\n<!-- prettier-ignore -->\n```js\nimport * as mr from 'multi-integer-range';\n\nconst ranges1 = mr.parse('1-6,9-12'); // [[1, 6], [9, 12]]\nconst ranges2 = mr.parse('7-10,100'); // [[7, 10], [100, 100]]\nconst ranges3 = mr.normalize([1, 5, 6, [4, 2]]); // [[1, 6]]\n\nconst sum = mr.append(ranges1, ranges2); // [[1, 12], [100, 100]]\nconst diff = mr.subtract(ranges1, ranges2); // [[1, 6], [11, 12]]\nconst commonValues = mr.intersect(ranges1, ranges2); // [[9, 10]]\n\nconst str = mr.stringify(sum); // \"1-12,100\"\nconst bool = mr.has(range1, ranges3); // true\nconst isSame = mr.equals(range1, range2); // false\nconst array = mr.flatten(ranges3); // [1, 2, 3, 4, 5, 6]\nconst len = mr.length(ranges1); // 10\n```\n\n## Creating a _normalized_ MultiIntegerRange\n\nThe fundamental data structure of this module is a **normalized** read-only array of `[min, max]` tuples, as shown in the following TypeScript definition. In other words, just an array of 2-element number arrays. Here, \"normalized\" means the range data is in the smallest possible representation and is sorted in ascending order.\n\n<!-- prettier-ignore -->\n```ts\ntype Range = readonly [min: number, max: number];\ntype MultiIntegerRange = readonly Range[];\ntype MIR = MultiIntegerRange; // short alias\n\n// Examples of normalized MultiIntegerRanges\n[[1, 3], [4, 4], [7, 10]]\n[[-Infinity, -5], [-1, 0], [3, 3], [9, Infinity]]\n[[-Infinity, Infinity]]\n\n// These are NOT normalized MultiIntegerRanges\n[[3, 1]] // min is larger than max\n[[7, 9], [1, 4]] // not in the ascending order\n[[1, 5], [3, 7]] // there is an overlap\n[[1, 2], [3, 4]] // the two ranges can be combined to \"1-4\"\n[[Infinity, Infinity]] // makes no sense\n```\n\nMost functions expect one or more **normalized** MultiIntegerRanges as shown above to work correctly. To produce a valid normalized MultiIntegerRange, you can use `normalize()` or `parse()`.\n\n`normalize(data?: number | (number | Range)[])` creates a normalized MultiIntegerRange from a single number or an unsorted array of numbers/Ranges. Importantly, `normalize()` is the only function that can safely take an unsorted array. Do not pass un-normalized range data to other functions.\n\n<!-- prettier-ignore -->\n```ts\nconsole.log(mr.normalize(10)); // [[10, 10]]\nconsole.log(mr.normalize([3, 1, 2, 4, 5])); // [[1, 5]]\nconsole.log(mr.normalize([5, [2, 0], 6])); // [[0, 2], [5, 6]]\nconsole.log(mr.normalize([7, 7, 7, 7, 10])); // [[7, 7], [10, 10]]\nconsole.log(mr.normalize()); // []\n\n// Do not pass un-normalized data to functions other than normalize().\nconst unsorted = [[3, 1], [2, 8]];\nconst wrong = mr.length(unsorted); // DON'T! This won't work!\nconst correct = mr.length(mr.normalize(unsorted)); // 8\n```\n\n`parse(data: string, options?: Options)` creates a normalized MultiIntegerRange from a string. The string parser is permissive and accepts space characters before/after comma/hyphens. It calls `normalize()` under the hood, so the order is not important, and overlapped numbers are silently ignored.\n\n```ts\nconsole.log(mr.parse('1-3,10')); // [[1, 3], [10, 10]]\nconsole.log(mr.parse('3,\\t8-3,2,3,\\n10, 9 - 7 ')); // [[2, 10]]\n```\n\nBy default, the string parser does not try to parse unbounded ranges or negative integers. You need to pass an `options` object to modify the parsing behavior. To avoid ambiguity, all negative integers must always be enclosed in parentheses (sorry for the wacky syntax, but it's always possible to make your custom parsing function if you prefer another syntax).\n\n```ts\nconsole.log(mr.parse('7-')); // throws a SyntaxError\n\nconsole.log(mr.parse('7-', { parseUnbounded: true })); // [[7, Infinity]]\nconsole.log(mr.parse('(-7)-(-1)', { parseNegative: true })); // [[-7, -1]]\nconsole.log(\n  mr.parse('0-,(-6)-(-2),-(-100)', {\n    parseUnbounded: true,\n    parseNegative: true\n  })\n); // [[-Infinity, -100], [-6, -2], [0, Infinity]]\n```\n\n## API\n\nAll functions are \"pure\", and exported as named exports. They do not change the input data nor do they have any side effects. All MultiIntegerRange's returned by these functions are normalized. `MIR` is just a short alias for `MultiIntegerRange` (available in d.ts).\n\n- `parse(data: string, options?: Options): MIR` Parses the given string.\n- `normalize(data?: number | (number | Range)[]): MIR` Normalizes the given number or the array of numbers/Ranges.\n- `append(a: MIR, b: MIR): MIR` Appends the two values.\n- `subtract(a: MIR, b: MIR): MIR` Subtracts `b` from `a`.\n- `intersect(a: MIR, b: MIR): MIR` Calculates the interesction, i.e., integers that belong to both `a` and `b`.\n- `has(a: MIR, b: MIR): boolean` Checks if `b` is a subset of `a`.\n- `length(data: MIR): number` Calculates how many numbers are effectively included in the given data (i.e., 5 for '3,5-7,9'). Returns Inifnity for unbounded ranges.\n- `equals(a: MIR, b: MIR): boolean` Checks if `a` and `b` contains the same range data.\n- `isUnbounded(data: MIR): boolean` Returns true if the instance is unbounded.\n- `min(data: MIR): number | undefined` Returns the minimum integer. May return -Infinity.\n- `max(data: MIR): number | undefined` Returns the maxinum integer. May return Infinity.\n- `tail(data: MIR): MIR` Removes the minimum integer.\n- `init(data: MIR): MIR` Removes the maxinum integer.\n- `stringify(data: MIR): string` Returns the string respresentation of the given data (the opposite of parse()).\n- `flatten(data: MIR): number[]` Builds a flat array of integers. This may be slow and memory-consuming for large ranges such as '1-10000'.\n- `iterate(data: MIR): Iterable<number>` Returns an ES6 iterable object. See the description below.\n\nAvailable `options` that can be passed to `parse()`:\n\n- `parseNegative` (boolean, default = false): Enables parsing negative ranges (e.g., `(-10)-(-3)`).\n- `parseUnbounded` (boolean, default = false): Enables parsing unbounded ranges (e.g., `-5,10-`).\n\n## Iteration\n\nSince `MultiIntegerRange` is just an array of `Range`s, if you naively iterate over it (e.g., in a for-of loop), you'll simply get each `Range` tuple one by one. To iterate each integer contained in the `MultiIntegerRange` instead, use `iterate()` like so:\n\n```js\nconst ranges = mr.parse('2,5-7');\n\nfor (const page of mr.iterate(ranges)) {\n  console.log(page);\n} // prints 2, 5, 6 and 7\n\n// array spreading (alternative of flatten())\nconst arr1 = [...mr.iterate(ranges)]; //=> [2, 5, 6, 7]\nconst arr2 = Array.from(mr.iterate(ranges)); //=> [2, 5, 6, 7]\n```\n\n## Tip\n\n### Combine Intersection and Unbounded Ranges\n\nIntersection is especially useful to \"trim\" unbounded ranges.\n\n```ts\nconst userInput = '-5,7-';\nconst pagesInMyDoc = [[1, 100]]; // '1-100'\nconst pagesToPrint = mr.intersect(\n  mr.parse(userInput, { parseUnbounded: true }),\n  pagesInMyDoc\n);\nconsole.log(mr.stringify(pagesToPrint)); // '1-5,7-100'\n```\n\n## Legacy Classe-based API\n\nFor compatibility purposes, version 5.x still exports the `MultiRange` class and `multirange` function, which is mostly compatible with the 4.x API but uses the new functional API under the hood. See the [4.x documentation](https://github.com/smikitky/node-multi-integer-range/tree/v4.0.9) for the usage. The use of this compatibility layer is discouraged because it is not tree-shakable and has no performance merit. Use this only during migration.\n\n## Changelog\n\nSee [CHANGELOG.md](CHANGELOG.md).\n\n## Caveats\n\n**Performance Considerations**: This library works efficiently for large ranges\nas long as they're _mostly_ continuous (e.g., `1-10240000,20480000-50960000`). However, this library is not intended to be efficient with a heavily fragmented set of integers that are scarcely continuous (e.g., random 10000 integers between 1 to 1000000).\n\n**No Integer Type Checks**: Make sure you are not passing floating-point `number`s\nto this library. For example, don't do `normalize(3.14)`. For performance reasons, the library does not check if a passed number is an integer. Passing a float will result in unexpected and unrecoverable behavior.\n\n## Development\n\n### Building and Testing\n\n```\nnpm install\nnpm run build\nnpm test\n```\n\n### Bugs\n\nPlease report any bugs and suggestions using GitHub issues.\n\n## Author\n\nSoichiro Miki (https://github.com/smikitky)\n\n## License\n\nMIT\n","readmeFilename":"README.md","gitHead":"e9d9256345dbc27016382f658fb3b665178bd75d","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@5.0.0-alpha.4","_nodeVersion":"14.16.1","_npmVersion":"7.20.5","dist":{"integrity":"sha512-GoHREi2uk3q4a176Le1gAeBal6XZWHnjGXwXG/BN1fLD/IhywNgTxrGMeRb3g5FrG7JFmAkRfbFtRcjxLdxBRg==","shasum":"7c5e355482ace05de758e8ec74c3162fe0f44d27","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-5.0.0-alpha.4.tgz","fileCount":11,"unpackedSize":49059,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhGPIzCRA9TVsSAnZWagAA63oP/RufhYlGlmsakp24Fl5n\nedhDh8NuVFeD+AzAtYerG/rdruG71UDi+tM6JBycAP8ZXDOCsc+bd7iYxY3/\nMwKukGe2yD1hydXj8Dk1baJ3pzq8nygg/GY80QKS2Rj5MhltSAfZeYtDcpbh\n6hTgQCpa5BqSBhKiTw6qFgS8pi9Qfu9GMwFDj/qYm4kFAZkeZ002oBHthHDP\nmywlnjGWwgvkWmMhdGZ0ao85qb7VH6KjPBWKbYPv2OA08R5VkLD15MQAbQVq\nZUmpGTzI828IkyUoQezxltkirdL0fBKMkb/gw+q2F6jiDwx7sdp38N8HwNPu\n0sho//l4kySM5iWVxKr25ToOCYWIJhoTCFIib2i9jEK+9XzGJVrnM35GkyfK\nNX7gQmw506iNtPSowjAAGW1zstvzUDzW8dngfJIXbu5C7SSSM6wiLe35Qrb6\neb0eDju/7pFs7LY/aA/WTdc4SoJnRx2pnUdoVKAMGgmp8OsZspDbs++4NoRb\nsiABTyase98Qr0Eii6j1D23l5Pu3rYWCO/GnpQe9099lrBpjiTqp4tFI6YHe\nQuB5SDNrVLgcjAupvUgh0XkUMjJ4b9R3wrAeHaxAZSXfhPU1gwxwRUzMa0Hi\nA2nSILoE884s2uHMOwvhp1rd9PWMrBtbr6XaNal7U9rSPSTY+eT4IexIzmj7\nGnCO\r\n=fDlb\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGCdiMQVWQiDjxxsaxSncH7tebazO9OTHux0HssSxtscAiEA15FJ6ZybCbDyRDh52nMrzibYnDRTmt09Nh5Mp//+aMA="}]},"_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"directories":{},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/multi-integer-range_5.0.0-alpha.4_1629024819040_0.6054347135330049"},"_hasShrinkwrap":false},"5.0.0-alpha.5":{"name":"multi-integer-range","version":"5.0.0-alpha.5","description":"Parses and manipulates multiple comma-separated integer ranges (eg 1-3,8-10)","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"sideEffects":false,"main":"./lib/cjs/index.js","module":"./lib/esm/index.js","types":"./lib/cjs/index.d.ts","scripts":{"test":"jest --coverage","build":"tsc && tsc -p tsconfig-cjs.json","prettier":"prettier --write src/**/*.{ts,js}"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"@types/jest":"^26.0.24","jest":"^27.0.6","jest-ts-webcompat-resolver":"^1.0.0","prettier":"^2.3.2","ts-jest":"^27.0.4","typescript":"^4.3.5"},"prettier":{"singleQuote":true,"arrowParens":"avoid","trailingComma":"none"},"runkitExampleFilename":"example.js","readme":"# multi-integer-range\n\n[![Build Status](https://github.com/smikitky/node-multi-integer-range/actions/workflows/tests.yml/badge.svg)](https://github.com/smikitky/node-multi-integer-range/actions)\n[![Coverage Status](https://coveralls.io/repos/github/smikitky/node-multi-integer-range/badge.svg?branch=dev)](https://coveralls.io/github/smikitky/node-multi-integer-range)\n[![npm version](https://badge.fury.io/js/multi-integer-range.svg)](https://badge.fury.io/js/multi-integer-range)\n\nA small library that parses comma-delimited integer ranges (such as `\"1-3,8-10\"`) and manipulates such range data. This type of data is commonly used to specify which lines to highlight or which pages to print.\n\nSupported operations:\n\n- Addition (e.g., `1-2,6` + `3-5` &rarr; `1-6`)\n- Subtraction (e.g., `1-10` - `5-9` &rarr; `1-4,10`)\n- Inclusion check (e.g., `3,7-9` &sub; `1-10`)\n- Intersection (e.g., `1-5` &cap; `2-8` &rarr; `2-5`)\n- Unbounded ranges (e.g., `5-`, meaning \"all integers &ge; 5\")\n- Ranges including negative integers or zero\n- ES6 iterator (`for ... of`, spread operator)\n- Array creation (\"flatten\")\n\nInternal data are always _sorted and normalized_ to the smallest possible representation.\n\n## Install\n\nFirst, choose the right version you need. The API style has changed drastically in version 5. The new API is slightly more verbose but fully tree-shakable.\n\n|                   | 4.x                  | 5.x (alpha)                    |\n| ----------------- | -------------------- | ------------------------------ |\n| API               | Class-based          | Function-based                 |\n| ES version        | Downpiled to ES5     | ES2015                         |\n| Module system     | CommonJS             | ESM/CJS hybrid (tree-shakable) |\n| Immutability      | Mutable method chain | Pure functions only            |\n| Supported runtime | Works even on IE     | See below                      |\n\nSupported runtime for version 5.x:\n\n- Node &ge; 10 (uses the CJS version)\n- Bundlers such as Webpack picks the ESM version of the module and benefit from tree-shaking\n- Modern browsers\n- Deno: Via Skypack, `import * as mr from 'https://cdn.skypack.dev/multi-integer-range@next?dts'`\n\nInstall via npm or yarn:\n\n```\nnpm install multi-integer-range@5\n```\n\nModern browsers can directly load this package as a standard ES module via CDN:\n\n```html\n<script type=\"module\">\n  import mr as * from 'https://unpkg.com/multi-integer-range@5/lib/fp.js';\n  console.log(mr.parse('7,6,5'));\n</script>\n```\n\n## Basic Example\n\n> **The following is the documentation for version 5, which is still in alpha. [Go to the docs for version 4](https://github.com/smikitky/node-multi-integer-range/tree/v4.0.9)**\n\n<!-- prettier-ignore -->\n```js\nimport * as mr from 'multi-integer-range';\n\nconst ranges1 = mr.parse('1-6,9-12'); // [[1, 6], [9, 12]]\nconst ranges2 = mr.parse('7-10,100'); // [[7, 10], [100, 100]]\nconst ranges3 = mr.normalize([1, 5, 6, [4, 2]]); // [[1, 6]]\n\nconst sum = mr.append(ranges1, ranges2); // [[1, 12], [100, 100]]\nconst diff = mr.subtract(ranges1, ranges2); // [[1, 6], [11, 12]]\nconst commonValues = mr.intersect(ranges1, ranges2); // [[9, 10]]\n\nconst str = mr.stringify(sum); // \"1-12,100\"\nconst bool = mr.has(ranges1, ranges3); // true\nconst isSame = mr.equals(ranges1, ranges2); // false\nconst array = mr.flatten(ranges3); // [1, 2, 3, 4, 5, 6]\nconst len = mr.length(ranges1); // 10\n```\n\n## Creating a _normalized_ MultiIntegerRange\n\nThe fundamental data structure of this module is a **normalized** read-only array of `[min, max]` tuples, as shown in the following TypeScript definition. In other words, just an array of 2-element number arrays. Here, \"normalized\" means the range data is in the smallest possible representation and is sorted in ascending order.\n\n<!-- prettier-ignore -->\n```ts\ntype Range = readonly [min: number, max: number];\ntype MultiIntegerRange = readonly Range[];\ntype MIR = MultiIntegerRange; // short alias\n\n// Examples of normalized MultiIntegerRanges\n[[1, 3], [4, 4], [7, 10]]\n[[-Infinity, -5], [-1, 0], [3, 3], [9, Infinity]]\n[[-Infinity, Infinity]]\n\n// These are NOT normalized MultiIntegerRanges\n[[3, 1]] // min is larger than max\n[[7, 9], [1, 4]] // not in the ascending order\n[[1, 5], [3, 7]] // there is an overlap\n[[1, 2], [3, 4]] // the two ranges can be combined to \"1-4\"\n[[Infinity, Infinity]] // makes no sense\n```\n\nMost functions expect one or more **normalized** MultiIntegerRanges as shown above to work correctly. To produce a valid normalized MultiIntegerRange, you can use `normalize()` or `parse()`.\n\n`normalize(data?: number | (number | Range)[])` creates a normalized MultiIntegerRange from a single number or an unsorted array of numbers/Ranges. Importantly, `normalize()` is the only function that can safely take an unsorted array. Do not pass un-normalized range data to other functions.\n\n<!-- prettier-ignore -->\n```ts\nconsole.log(mr.normalize(10)); // [[10, 10]]\nconsole.log(mr.normalize([3, 1, 2, 4, 5])); // [[1, 5]]\nconsole.log(mr.normalize([5, [2, 0], 6])); // [[0, 2], [5, 6]]\nconsole.log(mr.normalize([7, 7, 7, 7, 10])); // [[7, 7], [10, 10]]\nconsole.log(mr.normalize()); // []\n\n// Do not pass un-normalized data to functions other than normalize().\nconst unsorted = [[3, 1], [2, 8]];\nconst wrong = mr.length(unsorted); // DON'T! This won't work!\nconst correct = mr.length(mr.normalize(unsorted)); // 8\n```\n\n`parse(data: string, options?: Options)` creates a normalized MultiIntegerRange from a string. The string parser is permissive and accepts space characters before/after comma/hyphens. It calls `normalize()` under the hood, so the order is not important, and overlapped numbers are silently ignored.\n\n```ts\nconsole.log(mr.parse('1-3,10')); // [[1, 3], [10, 10]]\nconsole.log(mr.parse('3,\\t8-3,2,3,\\n10, 9 - 7 ')); // [[2, 10]]\n```\n\nBy default, the string parser does not try to parse unbounded ranges or negative integers. You need to pass an `options` object to modify the parsing behavior. To avoid ambiguity, all negative integers must always be enclosed in parentheses (sorry for the wacky syntax, but it's always possible to make your custom parsing function if you prefer another syntax).\n\n```ts\nconsole.log(mr.parse('7-')); // throws a SyntaxError\n\nconsole.log(mr.parse('7-', { parseUnbounded: true })); // [[7, Infinity]]\nconsole.log(mr.parse('(-7)-(-1)', { parseNegative: true })); // [[-7, -1]]\nconsole.log(\n  mr.parse('0-,(-6)-(-2),-(-100)', {\n    parseUnbounded: true,\n    parseNegative: true\n  })\n); // [[-Infinity, -100], [-6, -2], [0, Infinity]]\n```\n\n## API\n\nAll functions are \"pure\", and exported as named exports. They do not change the input data nor do they have any side effects. All MultiIntegerRange's returned by these functions are normalized. `MIR` is just a short alias for `MultiIntegerRange` (available in d.ts).\n\n- `parse(data: string, options?: Options): MIR` Parses the given string.\n- `normalize(data?: number | (number | Range)[]): MIR` Normalizes the given number or the array of numbers/Ranges.\n- `append(a: MIR, b: MIR): MIR` Appends the two values.\n- `subtract(a: MIR, b: MIR): MIR` Subtracts `b` from `a`.\n- `intersect(a: MIR, b: MIR): MIR` Calculates the interesction, i.e., integers that belong to both `a` and `b`.\n- `has(a: MIR, b: MIR): boolean` Checks if `b` is a subset of `a`.\n- `length(data: MIR): number` Calculates how many numbers are effectively included in the given data (i.e., 5 for '3,5-7,9'). Returns Inifnity for unbounded ranges.\n- `equals(a: MIR, b: MIR): boolean` Checks if `a` and `b` contains the same range data.\n- `isUnbounded(data: MIR): boolean` Returns true if the instance is unbounded.\n- `min(data: MIR): number | undefined` Returns the minimum integer. May return -Infinity.\n- `max(data: MIR): number | undefined` Returns the maxinum integer. May return Infinity.\n- `tail(data: MIR): MIR` Removes the minimum integer.\n- `init(data: MIR): MIR` Removes the maxinum integer.\n- `stringify(data: MIR): string` Returns the string respresentation of the given data (the opposite of parse()).\n- `flatten(data: MIR): number[]` Builds a flat array of integers. This may be slow and memory-consuming for large ranges such as '1-10000'.\n- `iterate(data: MIR): Iterable<number>` Returns an ES6 iterable object. See the description below.\n\nAvailable `options` that can be passed to `parse()`:\n\n- `parseNegative` (boolean, default = false): Enables parsing negative ranges (e.g., `(-10)-(-3)`).\n- `parseUnbounded` (boolean, default = false): Enables parsing unbounded ranges (e.g., `-5,10-`).\n\n## Iteration\n\nSince `MultiIntegerRange` is just an array of `Range`s, if you naively iterate over it (e.g., in a for-of loop), you'll simply get each `Range` tuple one by one. To iterate each integer contained in the `MultiIntegerRange` instead, use `iterate()` like so:\n\n```js\nconst ranges = mr.parse('2,5-7');\n\nfor (const page of mr.iterate(ranges)) {\n  console.log(page);\n} // prints 2, 5, 6 and 7\n\n// array spreading (alternative of flatten())\nconst arr1 = [...mr.iterate(ranges)]; //=> [2, 5, 6, 7]\nconst arr2 = Array.from(mr.iterate(ranges)); //=> [2, 5, 6, 7]\n```\n\n## Tip\n\n### Combine Intersection and Unbounded Ranges\n\nIntersection is especially useful to \"trim\" unbounded ranges.\n\n```ts\nconst userInput = '-5,7-';\nconst pagesInMyDoc = [[1, 100]]; // '1-100'\nconst pagesToPrint = mr.intersect(\n  mr.parse(userInput, { parseUnbounded: true }),\n  pagesInMyDoc\n);\nconsole.log(mr.stringify(pagesToPrint)); // '1-5,7-100'\n```\n\n## Legacy Classe-based API\n\nFor compatibility purposes, version 5.x still exports the `MultiRange` class and `multirange` function, which is mostly compatible with the 4.x API but uses the new functional API under the hood. See the [4.x documentation](https://github.com/smikitky/node-multi-integer-range/tree/v4.0.9) for the usage. The use of this compatibility layer is discouraged because it is not tree-shakable and has no performance merit. Use this only during migration.\n\n## Changelog\n\nSee [CHANGELOG.md](CHANGELOG.md).\n\n## Caveats\n\n**Performance Considerations**: This library works efficiently for large ranges\nas long as they're _mostly_ continuous (e.g., `1-10240000,20480000-50960000`). However, this library is not intended to be efficient with a heavily fragmented set of integers that are scarcely continuous (e.g., random 10000 integers between 1 to 1000000).\n\n**No Integer Type Checks**: Make sure you are not passing floating-point `number`s\nto this library. For example, don't do `normalize(3.14)`. For performance reasons, the library does not check if a passed number is an integer. Passing a float will result in unexpected and unrecoverable behavior.\n\n## Development\n\n### Building and Testing\n\n```\nnpm install\nnpm run build\nnpm test\n```\n\n### Bugs\n\nPlease report any bugs and suggestions using GitHub issues.\n\n## Author\n\nSoichiro Miki (https://github.com/smikitky)\n\n## License\n\nMIT\n","readmeFilename":"README.md","gitHead":"4a1eb9d0639f58dc86a582932ebdedcd2611d05e","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@5.0.0-alpha.5","_nodeVersion":"14.16.1","_npmVersion":"7.20.5","dist":{"integrity":"sha512-Vs9HpWkm1hWLJkbSuMxTnvFk33EEZ/96HdPYujPttItAECvG6OLWoXVrXZTLlQ6UDMBjJJL5pSP4TSCEOOFEDQ==","shasum":"32cf4c42918c3249e8105b07908d3a3bb8459559","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-5.0.0-alpha.5.tgz","fileCount":17,"unpackedSize":80441,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhGP29CRA9TVsSAnZWagAAlNoP/3dKQqJQWcf6LuYsOXR7\nrUHwjEvKCB391tLcOb0e+Siuwzrri12Mzbk8NX17pyLwciKtfVud9lsx/FUT\nV2nqousCVHomoVcznUydWJqDwOJNdrauML5qHtfG3W8Qpy4isO7lsrgSn4Q/\n5+wZAf1JqHFDhtm0PtzVXxIJhoorRNDz7bmXoEDfEmqaKBtuodc70WTYxyMy\nYhFIxQagUMGuPed16PxvrBYoFyCO6VSZ1vVVn+T/lSTYohk9A1mF0Bwl7N9T\nGTypYQXRyVadnIIvQ/+t295CBJ6Pobindi/zCvW5CEpcJvSdTqBVmU7a65tk\nEgvWJj/6XklW7KZxuh8sMRM6P28J0UKsjuDsA1xS+KA45ZorNutp3cxfBAdC\nhHKZnLkGehrQWXF8rds8oJGFCl0Joyay9s5/LBfQ9BaCvNmltaN7/NDfMqo6\nbAaeLmW05ugel0n8ev/V7pcEr3q9xNCKa/aMYCOk6ktd2CS1Fhu3usylh7WP\ndtX99ayf/NciYaEtMxQoCdc0PFA+1HtGm0cmM7vXM4Xp32nyfQgfClO5xT1S\nl92Fc6tZB1YM/g3OK/FMiATRXExQF0dMthul2gvmHl8w/EVmMqq5Pqn8huzN\ncYG44MIXb66ewWp7jxsgiRlGVEs25Ce99ZiGhz3wHkLZyfGiOGFG1ThNVUBC\nNew7\r\n=aOl7\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFH0lKMXHViAGTIDsq+7Cxlwfr5S4MqE/4ryj7O92L3nAiEAu4XXtccfwrAxoG/vskro5ByjXvPAxbXkb3lkDGXvp/I="}]},"_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"directories":{},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/multi-integer-range_5.0.0-alpha.5_1629027773722_0.4386041016857052"},"_hasShrinkwrap":false},"5.0.0-alpha.6":{"name":"multi-integer-range","version":"5.0.0-alpha.6","description":"Parses and manipulates multiple comma-separated integer ranges (eg 1-3,8-10)","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"sideEffects":false,"main":"./lib/cjs/index.js","module":"./lib/esm/index.js","exports":{"import":"./lib/esm/index.js","require":"./lib/cjs/index.js"},"types":"./lib/cjs/index.d.ts","scripts":{"test":"jest --coverage","build":"tsc && tsc -p tsconfig-cjs.json","prettier":"prettier --write src/**/*.{ts,js}"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"@types/jest":"^26.0.24","jest":"^27.0.6","jest-ts-webcompat-resolver":"^1.0.0","prettier":"^2.3.2","ts-jest":"^27.0.4","typescript":"^4.3.5"},"prettier":{"singleQuote":true,"arrowParens":"avoid","trailingComma":"none"},"runkitExampleFilename":"example.js","readme":"# multi-integer-range\n\n[![Build Status](https://github.com/smikitky/node-multi-integer-range/actions/workflows/tests.yml/badge.svg)](https://github.com/smikitky/node-multi-integer-range/actions)\n[![Coverage Status](https://coveralls.io/repos/github/smikitky/node-multi-integer-range/badge.svg?branch=dev)](https://coveralls.io/github/smikitky/node-multi-integer-range)\n[![npm version](https://badge.fury.io/js/multi-integer-range.svg)](https://badge.fury.io/js/multi-integer-range)\n\nA small library that parses comma-delimited integer ranges (such as `\"1-3,8-10\"`) and manipulates such range data. This type of data is commonly used to specify which lines to highlight or which pages to print.\n\nSupported operations:\n\n- Addition (e.g., `1-2,6` + `3-5` &rarr; `1-6`)\n- Subtraction (e.g., `1-10` - `5-9` &rarr; `1-4,10`)\n- Inclusion check (e.g., `3,7-9` &sub; `1-10`)\n- Intersection (e.g., `1-5` &cap; `2-8` &rarr; `2-5`)\n- Unbounded ranges (e.g., `5-`, meaning \"all integers &ge; 5\")\n- Ranges including negative integers or zero\n- ES6 iterator (`for ... of`, spread operator)\n- Array creation (\"flatten\")\n\nInternal data are always _sorted and normalized_ to the smallest possible representation.\n\n## Install\n\nFirst, choose the right version you need. The API style has changed drastically in version 5. The new API is slightly more verbose but fully tree-shakable.\n\n|                   | 4.x                  | 5.x (alpha)                    |\n| ----------------- | -------------------- | ------------------------------ |\n| API               | Class-based          | Function-based                 |\n| ES version        | Downpiled to ES5     | ES2015                         |\n| Module system     | CommonJS (CJS)       | ESM/CJS hybrid (tree-shakable) |\n| Immutability      | Mutable method chain | Pure functions only            |\n| Supported runtime | Works even on IE     | See below                      |\n\nSupported runtime for version 5.x:\n\n- Node &ge; 10 (uses the CJS version)\n- Bundlers such as Webpack can pick the ESM version and benefit from tree-shaking\n- Modern browsers can load the ESM version via CDN.\n- Deno: Via Skypack, `import * as mr from 'https://cdn.skypack.dev/multi-integer-range@^5.0.0-alpha.1?dts'`\n\nInstall via npm or yarn:\n\n```\nnpm install multi-integer-range@^5.0.0-alpha.1\n```\n\nAlthough not recommended for performance reasons, modern browsers can directly load this package as a standard ES module via CDN:\n\n```html\n<script type=\"module\">\n  // With unpkg\n  import * as mr1 from 'https://unpkg.com/multi-integer-range@^5.0.0-alpha.1/lib/esm/fp.js';\n  // With skypack\n  import * as mr2 from 'https://cdn.skypack.dev/multi-integer-range@^5.0.0-alpha.1';\n  console.log(mr1.parse('7,6,5'));\n</script>\n```\n\n## Basic Example\n\n> **The following is the documentation for version 5, which is still in alpha. [Go to the docs for version 4](https://github.com/smikitky/node-multi-integer-range/tree/v4.0.9)**\n\n<!-- prettier-ignore -->\n```js\nimport * as mr from 'multi-integer-range';\n\nconst ranges1 = mr.parse('1-6,9-12'); // [[1, 6], [9, 12]]\nconst ranges2 = mr.parse('7-10,100'); // [[7, 10], [100, 100]]\nconst ranges3 = mr.normalize([1, 5, 6, [4, 2]]); // [[1, 6]]\n\nconst sum = mr.append(ranges1, ranges2); // [[1, 12], [100, 100]]\nconst diff = mr.subtract(ranges1, ranges2); // [[1, 6], [11, 12]]\nconst commonValues = mr.intersect(ranges1, ranges2); // [[9, 10]]\n\nconst str = mr.stringify(sum); // \"1-12,100\"\nconst bool = mr.has(ranges1, ranges3); // true\nconst isSame = mr.equals(ranges1, ranges2); // false\nconst array = mr.flatten(ranges3); // [1, 2, 3, 4, 5, 6]\nconst len = mr.length(ranges1); // 10\n```\n\n## Creating a _normalized_ MultiIntegerRange\n\nThe fundamental data structure of this module is a **normalized** read-only array of `[min, max]` tuples, as shown in the following TypeScript definition. In other words, just an array of 2-element number arrays. Here, \"normalized\" means the range data is in the smallest possible representation and is sorted in ascending order.\n\n<!-- prettier-ignore -->\n```ts\ntype Range = readonly [min: number, max: number];\ntype MultiIntegerRange = readonly Range[];\ntype MIR = MultiIntegerRange; // short alias\n\n// Examples of normalized MultiIntegerRanges\n[[1, 3], [4, 4], [7, 10]]\n[[-Infinity, -5], [-1, 0], [3, 3], [9, Infinity]]\n[[-Infinity, Infinity]]\n\n// These are NOT normalized. Don't pass them to append() and such!\n[[3, 1]] // min is larger than max\n[[7, 9], [1, 4]] // not in the ascending order\n[[1, 5], [3, 7]] // there is an overlap\n[[1, 2], [3, 4]] // the two ranges can be combined to \"1-4\"\n[[Infinity, Infinity]] // makes no sense\n```\n\nMost functions expect one or more **normalized** MultiIntegerRanges as shown above to work correctly. To produce a valid normalized MultiIntegerRange, you can use `normalize()` or `parse()`.\n\n`normalize(data?: number | (number | Range)[])` creates a normalized MultiIntegerRange from a single number or an unsorted array of numbers/Ranges. Importantly, `normalize()` is the only function that can safely take an unsorted array. Do not pass un-normalized range data to other functions.\n\n<!-- prettier-ignore -->\n```ts\nconsole.log(mr.normalize(10)); // [[10, 10]]\nconsole.log(mr.normalize([3, 1, 2, 4, 5])); // [[1, 5]]\nconsole.log(mr.normalize([5, [2, 0], 6])); // [[0, 2], [5, 6]]\nconsole.log(mr.normalize([7, 7, 7, 7, 10])); // [[7, 7], [10, 10]]\nconsole.log(mr.normalize()); // []\n\n// Do not directly pass an un-normalized MultiIntegerRange\n// to functions other than normalize().\nconst unsorted = [[3, 1], [2, 8]];\nconst wrong = mr.length(unsorted); // This won't work!\nconst correct = mr.length(mr.normalize(unsorted)); // 8\n```\n\n`parse(data: string, options?: Options)` creates a normalized MultiIntegerRange from a string. The string parser is permissive and accepts space characters before/after comma/hyphens. It calls `normalize()` under the hood, so the order is not important, and overlapped numbers are silently ignored.\n\n```ts\nconsole.log(mr.parse('1-3,10')); // [[1, 3], [10, 10]]\nconsole.log(mr.parse('3,\\t8-3,2,3,\\n10, 9 - 7 ')); // [[2, 10]]\n```\n\nBy default, the string parser does not try to parse unbounded ranges or negative integers. You need to pass an `options` object to modify the parsing behavior. To avoid ambiguity, all negative integers must always be enclosed in parentheses (sorry for the wacky syntax, but it's always possible to make your custom parsing function if you prefer another syntax).\n\n```ts\nconsole.log(mr.parse('7-')); // throws a SyntaxError\n\nconsole.log(mr.parse('7-', { parseUnbounded: true })); // [[7, Infinity]]\nconsole.log(mr.parse('(-7)-(-1)', { parseNegative: true })); // [[-7, -1]]\nconsole.log(\n  mr.parse('0-,(-6)-(-2),-(-100)', {\n    parseUnbounded: true,\n    parseNegative: true\n  })\n); // [[-Infinity, -100], [-6, -2], [0, Infinity]]\n```\n\n## API\n\nAll functions are \"pure\", and exported as named exports. They do not change the input data nor do they have any side effects. All MultiIntegerRange's returned by these functions are normalized. `MIR` is just a short alias for `MultiIntegerRange` (available in d.ts).\n\n- `parse(data: string, options?: Options): MIR` Parses the given string. See below for the options.\n- `normalize(data?: number | (number | Range)[]): MIR` Normalizes the given number or the array of numbers/Ranges.\n- `append(a: MIR, b: MIR): MIR` Appends the two values.\n- `subtract(a: MIR, b: MIR): MIR` Subtracts `b` from `a`.\n- `intersect(a: MIR, b: MIR): MIR` Calculates the interesction, i.e., integers that belong to both `a` and `b`.\n- `has(a: MIR, b: MIR): boolean` Checks if `b` is a subset of `a`.\n- `length(data: MIR): number` Calculates how many numbers are effectively included in the given data (i.e., 5 for '3,5-7,9'). Returns Inifnity for unbounded ranges.\n- `equals(a: MIR, b: MIR): boolean` Checks if `a` and `b` contains the same range data.\n- `isUnbounded(data: MIR): boolean` Returns true if the instance is unbounded.\n- `min(data: MIR): number | undefined` Returns the minimum integer. May return -Infinity.\n- `max(data: MIR): number | undefined` Returns the maxinum integer. May return Infinity.\n- `tail(data: MIR): MIR` Removes the minimum integer.\n- `init(data: MIR): MIR` Removes the maxinum integer.\n- `stringify(data: MIR): string` Returns the string respresentation of the given data (the opposite of parse()).\n- `flatten(data: MIR): number[]` Builds a flat array of integers. This may be slow and memory-consuming for large ranges such as '1-10000'.\n- `iterate(data: MIR): Iterable<number>` Returns an ES6 iterable object. See the description below.\n\nAvailable `options` that can be passed to `parse()`:\n\n- `parseNegative` (boolean, default = false): Enables parsing negative ranges (e.g., `(-10)-(-3)`).\n- `parseUnbounded` (boolean, default = false): Enables parsing unbounded ranges (e.g., `-5,10-`).\n\n## Iteration\n\nSince `MultiIntegerRange` is just an array of `Range`s, if you naively iterate over it (e.g., in a for-of loop), you'll simply get each `Range` tuple one by one. To iterate each integer contained in the `MultiIntegerRange` instead, use `iterate()` like so:\n\n```js\nconst ranges = mr.parse('2,5-7');\n\nfor (const page of mr.iterate(ranges)) {\n  console.log(page);\n} // prints 2, 5, 6 and 7\n\n// array spreading (alternative of flatten())\nconst arr1 = [...mr.iterate(ranges)]; //=> [2, 5, 6, 7]\nconst arr2 = Array.from(mr.iterate(ranges)); //=> [2, 5, 6, 7]\n```\n\n## Tip\n\n### Combine Intersection and Unbounded Ranges\n\nIntersection is especially useful to \"trim\" unbounded ranges.\n\n```ts\nconst userInput = '-5,7-';\nconst pagesInMyDoc = [[1, 100]]; // '1-100'\nconst pagesToPrint = mr.intersect(\n  mr.parse(userInput, { parseUnbounded: true }),\n  pagesInMyDoc\n);\nconsole.log(mr.stringify(pagesToPrint)); // '1-5,7-100'\n```\n\n## Legacy Classe-based API\n\nFor compatibility purposes, version 5.x still exports the `MultiRange` class and `multirange` function, which is mostly compatible with the 4.x API but uses the new functional API under the hood. See the [4.x documentation](https://github.com/smikitky/node-multi-integer-range/tree/v4.0.9) for the usage. The use of this compatibility layer is discouraged because it is not tree-shakable and has no performance merit. Use this only during migration.\n\n## Changelog\n\nSee [CHANGELOG.md](CHANGELOG.md).\n\n## Caveats\n\n**Performance Considerations**: This library works efficiently for large ranges\nas long as they're _mostly_ continuous (e.g., `1-10240000,20480000-50960000`). However, this library is not intended to be efficient with a heavily fragmented set of integers that are scarcely continuous (e.g., random 10000 integers between 1 to 1000000).\n\n**No Integer Type Checks**: Make sure you are not passing floating-point `number`s\nto this library. For example, don't do `normalize(3.14)`. For performance reasons, the library does not check if a passed number is an integer. Passing a float will result in unexpected and unrecoverable behavior.\n\n## Development\n\n### Building and Testing\n\n```\nnpm install\nnpm run build\nnpm test\n```\n\n### Bugs\n\nPlease report any bugs and suggestions using GitHub issues.\n\n## Author\n\nSoichiro Miki (https://github.com/smikitky)\n\n## License\n\nMIT\n","readmeFilename":"README.md","gitHead":"6a03c659c981fc7672a03b67c75392a1c01094a0","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@5.0.0-alpha.6","_nodeVersion":"14.16.1","_npmVersion":"7.20.5","dist":{"integrity":"sha512-ExBPcYXpGvV+vxkakDQn4y2q1oG4G8sAa8WHNYq20nQ0KUm+GnzlmrbxThrfGTpSTp1+tdeclabPFt4H7GquNA==","shasum":"6407a69df12d70af4504a415eb7a054e5c31f79b","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-5.0.0-alpha.6.tgz","fileCount":17,"unpackedSize":80835,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhGQ0mCRA9TVsSAnZWagAApAUP/RwqrqdT6nXOp+cArtSJ\nu3eDorWje77kFHA8QTUgtGPRdLYc0a1d1acwZPQqTSb6PywAuit+m2jTr9hP\nQHfRcAGZyqfnC5Xi0jmOcf6iOnsbTYyNhkZ46EVerSqE4QhBidm9Phyn/gYH\n+rXq/+Xb06CN0JG59VXzyU00fNlPhY4DJMrHKopbcWOZetHuF0rUFJtLY23s\np/8hx7EMpUsWE/I8p0rztT0jGsk7kXIDaByko3RI0VnqYcpWS5LGCzMxYsbm\n1XfzqkRrCzfb3Mz/nxhvpZAUYSH4nJWlMCtUeIt0JAyOQwlhIFNe9GGgLjvW\nwezxvTyh+YTxu87vKY0I+jnmJLtOyvYyQ55g0qoJ8RVIrnhu8sTXlPGr/bT1\nAkZzqNrUenIwZ+uOTWLVHP0/FxeRxEj/dbjm1fUvFcKaCrxqf/OX8IbRNEwb\ndm5yaWu9wfJB35KyLuN2lV023AbSDgWKZOuNOCJxipJoG3EjvMsVzpCfssFA\n2bvBg11a7pRLMCxHQJiUx88wLGzyRW9Ig5Ao+bxw3t8DKYMNhi7DfuxxkpcN\nbIJby98J+OXGFVQ7sLUCMMa5frKslCAUKvL6n6p/83nMK30lBYCL8ORLVvXT\nh9KamQyJB5MQyh3zTTFMWnpPUFtwzO2bZDv1PeE4fXdjKj6ALMZME8HBh+Ur\nP/um\r\n=d/BX\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDU8xVDMfxmw7ooH+uD2jMaBq24PWfhEmBvXHo7F2VKYAIgck02NtDkzYJutnrVWdQgUo4GIpCQ3fDppj/dzn1qt+0="}]},"_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"directories":{},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/multi-integer-range_5.0.0-alpha.6_1629031717874_0.15547511341757048"},"_hasShrinkwrap":false},"5.0.0-beta.0":{"name":"multi-integer-range","version":"5.0.0-beta.0","description":"Parses and manipulates multiple comma-separated integer ranges (eg 1-3,8-10)","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"sideEffects":false,"main":"./lib/cjs/index.js","module":"./lib/esm/index.js","exports":{"import":"./lib/esm/index.js","require":"./lib/cjs/index.js"},"types":"./lib/cjs/index.d.ts","scripts":{"test":"jest --coverage","clean":"rimraf lib","build":"npm run clean && tsc -p tsconfig-esm.json && tsc -p tsconfig-cjs.json","prepack":"npm run build","prettier":"prettier --write src/**/*.{ts,js}"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"@types/jest":"^26.0.24","jest":"^27.0.6","jest-ts-webcompat-resolver":"^1.0.0","prettier":"^2.3.2","rimraf":"^3.0.2","ts-jest":"^27.0.4","typescript":"^4.3.5"},"prettier":{"singleQuote":true,"arrowParens":"avoid","trailingComma":"none"},"runkitExampleFilename":"example.js","readme":"# multi-integer-range\n\n[![Build Status](https://github.com/smikitky/node-multi-integer-range/actions/workflows/tests.yml/badge.svg)](https://github.com/smikitky/node-multi-integer-range/actions)\n[![Coverage Status](https://coveralls.io/repos/github/smikitky/node-multi-integer-range/badge.svg?branch=dev)](https://coveralls.io/github/smikitky/node-multi-integer-range)\n[![npm version](https://badge.fury.io/js/multi-integer-range.svg)](https://badge.fury.io/js/multi-integer-range)\n\nA small library that parses comma-delimited integer ranges (such as `\"1-3,8-10\"`) and manipulates such range data. This type of data is commonly used to specify which lines to highlight or which pages to print.\n\nSupported operations:\n\n- Addition (e.g., `1-2,6` + `3-5` &rarr; `1-6`)\n- Subtraction (e.g., `1-10` - `5-9` &rarr; `1-4,10`)\n- Inclusion check (e.g., `3,7-9` &sub; `1-10`)\n- Intersection (e.g., `1-5` &cap; `2-8` &rarr; `2-5`)\n- Unbounded ranges (aka infinite ranges, e.g., `5-`, meaning \"all integers &ge; 5\")\n- Ranges including negative integers or zero\n- ES6 iterator (`for ... of`, spread operator)\n- Array creation (\"flatten\")\n\nThe range data are always _sorted and normalized_ to the smallest possible representation.\n\n🚨 **Note (2022-03-11)**: The following README is for the 5.x release, which is still in beta. For the docs of the stable (@latest) release, check the NPM site. 🚨\n\n## Install\n\nInstall via npm or yarn:\n\n```\nnpm install multi-integer-range\n```\n\nVersion 5 provides both CommonJS and ESM builds. Bundlers such as Webpack can automatically pick the ESM version and perform tree-shaking. This package has no external dependencies nor does it use any Node-specific API.\n\nThe API style has changed drastically in version 5. The new API is slightly more verbose, but is simpler and tree-shakable. See the [CHANGELOG](./CHANGELOG.md) and the [docs for version 4](https://github.com/smikitky/node-multi-integer-range/tree/v4.0.9).\n\n<details>\n<summary>Deno & Modern Browsers</summary>\nDeno users can use Skypack CDN:\n\n```ts\nimport * as mr from 'https://cdn.skypack.dev/multi-integer-range?dts';\n```\n\nAlthough not recommended from a performance standpoint, modern browsers can directly load this package as a standard ES module via CDN:\n\n```html\n<script type=\"module\">\n  import * as mr from 'https://cdn.skypack.dev/multi-integer-range';\n  console.log(mr.parse('7,6,5'));\n</script>\n```\n\nNote that you probably want to fixate the version, e.g., multi-integer-range@5.0.3\n\n</details>\n\n## Basic Example\n\n<!-- prettier-ignore -->\n```js\nimport * as mr from 'multi-integer-range';\n\nconst ranges1 = mr.parse('1-6,9-12'); // [[1, 6], [9, 12]]\nconst ranges2 = mr.parse('7-10, 100'); // [[7, 10], [100, 100]]\nconst ranges3 = mr.normalize([1, 5, 6, [4, 2]]); // [[1, 6]]\n\nconst sum = mr.append(ranges1, ranges2); // [[1, 12], [100, 100]]\nconst diff = mr.subtract(ranges1, ranges2); // [[1, 6], [11, 12]]\nconst commonValues = mr.intersect(ranges1, ranges2); // [[9, 10]]\n\nconst str = mr.stringify(sum); // \"1-12,100\"\nconst bool = mr.has(ranges1, ranges3); // true\nconst isSame = mr.equals(ranges1, ranges2); // false\nconst array = mr.flatten(diff); // [1, 2, 3, 4, 5, 6, 11, 12]\nconst len = mr.length(ranges1); // 10\n```\n\n## Creating a _normalized_ MultiIntegerRange\n\nThe fundamental data structure of this package is a **normalized** array of `[min, max]` tuples, as shown below. Here, \"normalized\" means the range data is in the smallest possible representation and is sorted in ascending order. You can denote an unbounded range using the JavaScript constant `Infinity`.\n\n<!-- prettier-ignore -->\n```ts\ntype Range = readonly [min: number, max: number];\ntype MultiIntegerRange = readonly Range[];\ntype MIR = MultiIntegerRange; // short alias\n\n// Examples of normalized MultiIntegerRanges\n[[1, 3], [5, 6], [9, 12]] // 1-3,5-6,9-12\n[[-Infinity, 4], [7, 7], [10, Infinity]] // -4,7,10-\n[[-Infinity, Infinity]] // all integers\n[] // empty\n\n// These are NOT normalized. Don't pass them to append() and such!\n[[3, 1]] // min is larger than max\n[[7, 9], [1, 4]] // not in the ascending order\n[[1, 5], [3, 7]] // there is an overlap\n[[1, 2], [3, 4]] // the two ranges can be combined to \"1-4\"\n[[Infinity, Infinity]] // makes no sense\n```\n\nMost functions take one or two **normalized** `MultiIntegerRange`s as shown above to work correctly. To produce a valid normalized `MultiIntegerRange`, you can use `normalize()` or `parse()`. (You can write a normalized `MultiIntgerRange` by hand as shown above, too.)\n\n`normalize(data?: number | (number | Range)[])` creates a normalized `MultiIntegerRange` from a single integer or an unsorted array of integers/`Range`s. This is the only function that can safely take an unsorted array. Do not pass unnormalized range data to other functions.\n\n<!-- prettier-ignore -->\n```ts\nconsole.log(mr.normalize(10)); // [[10, 10]]\nconsole.log(mr.normalize([3, 1, 2, 4, 5])); // [[1, 5]]\nconsole.log(mr.normalize([5, [2, 0], 6])); // [[0, 2], [5, 6]]\nconsole.log(mr.normalize([7, 7, 10, 7, 7])); // [[7, 7], [10, 10]]\nconsole.log(mr.normalize()); // []\n\n// Do not directly pass an unnormalized array\n// to functions other than normalize().\nconst unsorted = [[3, 1], [2, 8]];\nconst wrong = mr.length(unsorted); // This won't work!\nconst correct = mr.length(mr.normalize(unsorted)); // 8\n```\n\n`parse(data: string, options?: Options)` creates a normalized `MultiIntegerRange` from a string. The string parser is permissive and accepts space characters before/after comma/hyphens. It calls `normalize()` under the hood, so the order is not important, and overlapped numbers are silently ignored.\n\n```ts\nconsole.log(mr.parse('1-3,10')); // [[1, 3], [10, 10]]\nconsole.log(mr.parse('3,\\t8-3,2,3,\\n10, 9 - 7 ')); // [[2, 10]]\n```\n\nBy default, the string parser does not try to parse unbounded ranges or negative integers. You need to pass an `options` object to modify the parsing behavior. To avoid ambiguity, all negative integers must always be enclosed in parentheses. If you don't like the default `parse()`, you can always create and use your custom parsing function instead, as long as it returns a normalized `MultiIntegerRange`.\n\n```ts\nconsole.log(mr.parse('7-')); // throws a SyntaxError\n\nconsole.log(mr.parse('7-', { parseUnbounded: true })); // [[7, Infinity]]\nconsole.log(mr.parse('(-7)-(-1)', { parseNegative: true })); // [[-7, -1]]\nconsole.log(\n  mr.parse('0-,(-6)-(-2),-(-100)', {\n    parseUnbounded: true,\n    parseNegative: true\n  })\n); // [[-Infinity, -100], [-6, -2], [0, Infinity]]\n```\n\n## API Reference\n\nAll functions are \"pure\", and are exported as named exports. They do not change the input data nor do they have any side effects. All `MultiIntegerRange`s returned by these functions are normalized. `MIR` is just a short alias for `MultiIntegerRange` (also available in d.ts).\n\n- `parse(data: string, options?: Options): MIR` Parses the given string. See below for the options.\n- `normalize(data?: number | (number | Range)[]): MIR` Normalizes the given number or the array of numbers/Ranges.\n- `append(a: MIR, b: MIR): MIR` Appends the two values.\n- `subtract(a: MIR, b: MIR): MIR` Subtracts `b` from `a`.\n- `intersect(a: MIR, b: MIR): MIR` Calculates the interesction, i.e., integers that belong to both `a` and `b`.\n- `has(a: MIR, b: MIR): boolean` Checks if `b` is equal to or a subset of `a`.\n- `length(data: MIR): number` Calculates how many numbers are effectively included in the given data (i.e., 5 for '3,5-7,9'). Returns Inifnity for unbounded ranges.\n- `equals(a: MIR, b: MIR): boolean` Checks if `a` and `b` contains the same range data. (If you like, you can use other deep-equal utilities instead.)\n- `isUnbounded(data: MIR): boolean` Returns true if the instance is unbounded.\n- `min(data: MIR): number | undefined` Returns the minimum integer. May return -Infinity.\n- `max(data: MIR): number | undefined` Returns the maxinum integer. May return Infinity.\n- `tail(data: MIR): MIR` Removes the minimum integer.\n- `init(data: MIR): MIR` Removes the maxinum integer.\n- `stringify(data: MIR): string` Returns the string respresentation of the given data (the opposite of parse()).\n- `flatten(data: MIR): number[]` Builds a flat array of integers. This may be slow and memory-consuming for large ranges such as '1-10000'.\n- `iterate(data: MIR): Iterable<number>` Returns an ES6 iterable object. See the description below.\n\nAvailable `options` that can be passed to `parse()`:\n\n- `parseNegative` (boolean, default = false): Enables parsing negative ranges (e.g., `(-10)-(-3)`).\n- `parseUnbounded` (boolean, default = false): Enables parsing unbounded ranges (e.g., `-5,10-`).\n\n## Iteration\n\nSince a `MultiIntegerRange` is just an array of `Range`s, if you naively iterate over it (e.g., in a for-of loop), you'll simply get each `Range` tuple one by one. To iterate each integer contained in the `MultiIntegerRange` instead, use `iterate()` like so:\n\n```ts\nconst ranges = mr.parse('2,5-7');\n\nfor (const page of ranges) {\n  console.log(page);\n} // prints 2 items: [2, 2] and [5, 7]\n\nfor (const page of mr.iterate(ranges)) {\n  console.log(page);\n} // prints 4 items: 2, 5, 6 and 7\n\n// array spreading (alternative of flatten())\nconst arr1 = [...mr.iterate(ranges)]; //=> [2, 5, 6, 7]\nconst arr2 = Array.from(mr.iterate(ranges)); //=> [2, 5, 6, 7]\n```\n\n## Tip\n\n### Combine Intersection and Unbounded Ranges\n\nIntersection is especially useful to \"trim\" unbounded ranges.\n\n```ts\nconst userInput = '-5,15-';\nconst pagesInMyDoc = [[1, 20]]; // '1-20'\nconst pagesToPrint = mr.intersect(\n  mr.parse(userInput, { parseUnbounded: true }),\n  pagesInMyDoc\n);\nfor (const page of mr.iterate(pagesToPrint)) await printPage(page);\n```\n\n## Legacy Classe-based API\n\nFor compatibility purposes, version 5 exports the `MultiRange` class and `multirange` function, which is mostly compatible with the 4.x API but has been rewritten to use the new functional API under the hood. See the [4.x documentation](https://github.com/smikitky/node-multi-integer-range/tree/v4.0.9) for the usage. The use of this compatibility layer is discouraged because it is not tree-shakable and has no performance merit. Use this only during migration. These may be removed in the future.\n\n## Changelog\n\nSee [CHANGELOG.md](CHANGELOG.md).\n\n## Caveats\n\n**Performance Considerations**: This library works efficiently for large ranges\nas long as they're _mostly_ continuous (e.g., `1-10240000,20480000-50960000`). However, this library is not intended to be efficient with a heavily fragmented set of integers that are scarcely continuous (e.g., random 10000 integers between 1 to 1000000).\n\n**No Integer Type Checks**: Make sure you are not passing floating-point `number`s\nto this library. For example, don't do `normalize(3.14)`. For performance reasons, the library does not check if a passed number is an integer. Passing a float will result in unexpected and unrecoverable behavior.\n\n## Development\n\nTo test:\n\n```\nnpm ci\nnpm test\n```\n\nTo generate CJS and ESM builds:\n\n```\nnpm ci\nnpm run build\n```\n\nPlease report bugs and suggestions using GitHub issues.\n\n## Author\n\nSoichiro Miki (https://github.com/smikitky)\n\n## License\n\nMIT\n","readmeFilename":"README.md","gitHead":"cd9f0e8270dd86b1389c7e259c3f4f5f5042c92b","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@5.0.0-beta.0","_nodeVersion":"16.14.0","_npmVersion":"8.3.1","dist":{"integrity":"sha512-1FzS4173pQJBIxai2VPT+oIEfgriAS1pC4au+CEP3QDR+o8nSxERmTCZtcO836Q7mc68pI7nXh9n78mEImCKgQ==","shasum":"56bd41893aadc1bb6e9ac38677ca7a204268d620","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-5.0.0-beta.0.tgz","fileCount":17,"unpackedSize":83842,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiKq6gACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmqwbg//UPZhZGNMFFZk86j1SPgJPTAP+qTQ71WbHMTNx1+TO9L7nPUV\r\n5iBNRU1iy3LXlq9LG9sghE+RFoYrfCrCoqt6GbMWfhOl4wAruYnz2ibajufd\r\nMNybGzDwjkCS9OtYJ/z60v5qUezTvOIqrkVukhmFsXqUF7uqvtbZXBdjEfEJ\r\nibgdhnTzKJ9PBMudUzT3jb2SyN3HjsTCGzptL63B9WkieaLEyyIBczBhrzGt\r\nTPC4sVBtxcZIHx3NtJvimmnUK9x8jFRsOn77fFijh47aGjkpUlSsqcDd6+0z\r\nn42mfYZLgkHvoWRySJ1vNwXNxGdIMh6Z5spVh5HUf4XZZg5NFdTVZWdFu5aA\r\nkK94gu2ys6K7j+igBalFZQ0fxEBmpf3oukVlhCv70KE/K+l67QoBEOabupTV\r\ncitDYY0gjiYJBD88MzLAuMIPuIHdQ01oYg+WWPCK/5znb5t4PjUq6enyEKKM\r\nNyzqr+GG8XWskpbet2fxdx/70XHs17hjvuVTBH+gsnKUiu93UTjav8UvIb3j\r\ntnXOKAkEQQJ3qw0/eO5Q+ZVcsn9ViA4R+wNByLlvU9FAilIK0HLhK8kEXQHE\r\n36V233T03LPRuA5xNoqs2UJfgilPAQrelCbkdKthGBv/yDCqnWjwQ5aJu4/s\r\n/rC4JBuXBeXbGnpTfABCsDmWyxD5EpJvyZ4=\r\n=GYxQ\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDwMi8/8Epw/hgH/ZdHEtfn/FbiaJWF26oPrTXyug+0RgIhAOFmT199fykzv1z4fOm4GDIOgxc5YxFTTMrjKjMjwjE3"}]},"_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"directories":{},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/multi-integer-range_5.0.0-beta.0_1646964384694_0.20390410538155335"},"_hasShrinkwrap":false},"5.0.0-beta.1":{"name":"multi-integer-range","version":"5.0.0-beta.1","description":"Parses and manipulates multiple comma-separated integer ranges (eg 1-3,8-10)","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"sideEffects":false,"main":"./lib/cjs/index.js","module":"./lib/esm/index.js","exports":{"import":"./lib/esm/index.js","require":"./lib/cjs/index.js"},"types":"./lib/cjs/index.d.ts","scripts":{"test":"jest --coverage","clean":"rimraf lib","build":"npm run clean && tsc -p tsconfig-esm.json && tsc -p tsconfig-cjs.json && node postbuild.js","prepack":"npm run build","prettier":"prettier --write src/**/*.{ts,js}"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"@types/jest":"^26.0.24","jest":"^27.0.6","jest-ts-webcompat-resolver":"^1.0.0","prettier":"^2.3.2","rimraf":"^3.0.2","ts-jest":"^27.0.4","typescript":"^4.3.5"},"prettier":{"singleQuote":true,"arrowParens":"avoid","trailingComma":"none"},"runkitExampleFilename":"example.js","readme":"# multi-integer-range\n\n[![Build Status](https://github.com/smikitky/node-multi-integer-range/actions/workflows/tests.yml/badge.svg)](https://github.com/smikitky/node-multi-integer-range/actions)\n[![Coverage Status](https://coveralls.io/repos/github/smikitky/node-multi-integer-range/badge.svg?branch=dev)](https://coveralls.io/github/smikitky/node-multi-integer-range)\n[![npm version](https://badge.fury.io/js/multi-integer-range.svg)](https://badge.fury.io/js/multi-integer-range)\n\nA small library that parses comma-delimited integer ranges (such as `\"1-3,8-10\"`) and manipulates such range data. This type of data is commonly used to specify which lines to highlight or which pages to print.\n\nSupported operations:\n\n- Addition (e.g., `1-2,6` + `3-5` &rarr; `1-6`)\n- Subtraction (e.g., `1-10` - `5-9` &rarr; `1-4,10`)\n- Inclusion check (e.g., `3,7-9` &sub; `1-10`)\n- Intersection (e.g., `1-5` &cap; `2-8` &rarr; `2-5`)\n- Unbounded ranges (aka infinite ranges, e.g., `5-`, meaning \"all integers &ge; 5\")\n- Ranges including negative integers or zero\n- ES6 iterator (`for ... of`, spread operator)\n- Array creation (\"flatten\")\n\nThe range data are always _sorted and normalized_ to the smallest possible representation.\n\n🚨 **Note (2022-03-11)**: The following README is for the 5.x release, which is still in beta. For the docs of the stable (@latest) release, check the NPM site. 🚨\n\n## Install\n\nInstall via npm or yarn:\n\n```\nnpm install multi-integer-range\n```\n\nVersion 5 provides both CommonJS and ESM builds. Bundlers such as Webpack can automatically pick the ESM version and perform tree-shaking. This package has no external dependencies nor does it use any Node-specific API.\n\nThe API style has changed drastically in version 5. The new API is slightly more verbose, but is simpler and tree-shakable. See the [CHANGELOG](./CHANGELOG.md) and the [docs for version 4](https://github.com/smikitky/node-multi-integer-range/tree/v4.0.9).\n\n<details>\n<summary>Deno & Modern Browsers</summary>\nDeno users can use Skypack CDN:\n\n```ts\nimport * as mr from 'https://cdn.skypack.dev/multi-integer-range?dts';\n```\n\nAlthough not recommended from a performance standpoint, modern browsers can directly load this package as a standard ES module via CDN:\n\n```html\n<script type=\"module\">\n  import * as mr from 'https://cdn.skypack.dev/multi-integer-range';\n  console.log(mr.parse('7,6,5'));\n</script>\n```\n\nNote that you probably want to fixate the version, e.g., multi-integer-range@5.0.3\n\n</details>\n\n## Basic Example\n\n<!-- prettier-ignore -->\n```js\nimport * as mr from 'multi-integer-range';\n\nconst ranges1 = mr.parse('1-6,9-12'); // [[1, 6], [9, 12]]\nconst ranges2 = mr.parse('7-10, 100'); // [[7, 10], [100, 100]]\nconst ranges3 = mr.normalize([1, 5, 6, [4, 2]]); // [[1, 6]]\n\nconst sum = mr.append(ranges1, ranges2); // [[1, 12], [100, 100]]\nconst diff = mr.subtract(ranges1, ranges2); // [[1, 6], [11, 12]]\nconst commonValues = mr.intersect(ranges1, ranges2); // [[9, 10]]\n\nconst str = mr.stringify(sum); // \"1-12,100\"\nconst bool = mr.has(ranges1, ranges3); // true\nconst isSame = mr.equals(ranges1, ranges2); // false\nconst array = mr.flatten(diff); // [1, 2, 3, 4, 5, 6, 11, 12]\nconst len = mr.length(ranges1); // 10\n```\n\n## Creating a _normalized_ MultiIntegerRange\n\nThe fundamental data structure of this package is a **normalized** array of `[min, max]` tuples, as shown below. Here, \"normalized\" means the range data is in the smallest possible representation and is sorted in ascending order. You can denote an unbounded range using the JavaScript constant `Infinity`.\n\n<!-- prettier-ignore -->\n```ts\ntype Range = readonly [min: number, max: number];\ntype MultiIntegerRange = readonly Range[];\ntype MIR = MultiIntegerRange; // short alias\n\n// Examples of normalized MultiIntegerRanges\n[[1, 3], [5, 6], [9, 12]] // 1-3,5-6,9-12\n[[-Infinity, 4], [7, 7], [10, Infinity]] // -4,7,10-\n[[-Infinity, Infinity]] // all integers\n[] // empty\n\n// These are NOT normalized. Don't pass them to append() and such!\n[[3, 1]] // min is larger than max\n[[7, 9], [1, 4]] // not in the ascending order\n[[1, 5], [3, 7]] // there is an overlap\n[[1, 2], [3, 4]] // the two ranges can be combined to \"1-4\"\n[[Infinity, Infinity]] // makes no sense\n```\n\nMost functions take one or two **normalized** `MultiIntegerRange`s as shown above to work correctly. To produce a valid normalized `MultiIntegerRange`, you can use `normalize()` or `parse()`. (You can write a normalized `MultiIntgerRange` by hand as shown above, too.)\n\n`normalize(data?: number | (number | Range)[])` creates a normalized `MultiIntegerRange` from a single integer or an unsorted array of integers/`Range`s. This is the only function that can safely take an unsorted array. Do not pass unnormalized range data to other functions.\n\n<!-- prettier-ignore -->\n```ts\nconsole.log(mr.normalize(10)); // [[10, 10]]\nconsole.log(mr.normalize([3, 1, 2, 4, 5])); // [[1, 5]]\nconsole.log(mr.normalize([5, [2, 0], 6])); // [[0, 2], [5, 6]]\nconsole.log(mr.normalize([7, 7, 10, 7, 7])); // [[7, 7], [10, 10]]\nconsole.log(mr.normalize()); // []\n\n// Do not directly pass an unnormalized array\n// to functions other than normalize().\nconst unsorted = [[3, 1], [2, 8]];\nconst wrong = mr.length(unsorted); // This won't work!\nconst correct = mr.length(mr.normalize(unsorted)); // 8\n```\n\n`parse(data: string, options?: Options)` creates a normalized `MultiIntegerRange` from a string. The string parser is permissive and accepts space characters before/after comma/hyphens. It calls `normalize()` under the hood, so the order is not important, and overlapped numbers are silently ignored.\n\n```ts\nconsole.log(mr.parse('1-3,10')); // [[1, 3], [10, 10]]\nconsole.log(mr.parse('3,\\t8-3,2,3,\\n10, 9 - 7 ')); // [[2, 10]]\n```\n\nBy default, the string parser does not try to parse unbounded ranges or negative integers. You need to pass an `options` object to modify the parsing behavior. To avoid ambiguity, all negative integers must always be enclosed in parentheses. If you don't like the default `parse()`, you can always create and use your custom parsing function instead, as long as it returns a normalized `MultiIntegerRange`.\n\n```ts\nconsole.log(mr.parse('7-')); // throws a SyntaxError\n\nconsole.log(mr.parse('7-', { parseUnbounded: true })); // [[7, Infinity]]\nconsole.log(mr.parse('(-7)-(-1)', { parseNegative: true })); // [[-7, -1]]\nconsole.log(\n  mr.parse('0-,(-6)-(-2),-(-100)', {\n    parseUnbounded: true,\n    parseNegative: true\n  })\n); // [[-Infinity, -100], [-6, -2], [0, Infinity]]\n```\n\n## API Reference\n\nAll functions are \"pure\", and are exported as named exports. They do not change the input data nor do they have any side effects. All `MultiIntegerRange`s returned by these functions are normalized. `MIR` is just a short alias for `MultiIntegerRange` (also available in d.ts).\n\n- `parse(data: string, options?: Options): MIR` Parses the given string. See below for the options.\n- `normalize(data?: number | (number | Range)[]): MIR` Normalizes the given number or the array of numbers/Ranges.\n- `append(a: MIR, b: MIR): MIR` Appends the two values.\n- `subtract(a: MIR, b: MIR): MIR` Subtracts `b` from `a`.\n- `intersect(a: MIR, b: MIR): MIR` Calculates the interesction, i.e., integers that belong to both `a` and `b`.\n- `has(a: MIR, b: MIR): boolean` Checks if `b` is equal to or a subset of `a`.\n- `length(data: MIR): number` Calculates how many numbers are effectively included in the given data (i.e., 5 for '3,5-7,9'). Returns Inifnity for unbounded ranges.\n- `equals(a: MIR, b: MIR): boolean` Checks if `a` and `b` contains the same range data. (If you like, you can use other deep-equal utilities instead.)\n- `isUnbounded(data: MIR): boolean` Returns true if the instance is unbounded.\n- `min(data: MIR): number | undefined` Returns the minimum integer. May return -Infinity.\n- `max(data: MIR): number | undefined` Returns the maxinum integer. May return Infinity.\n- `tail(data: MIR): MIR` Removes the minimum integer.\n- `init(data: MIR): MIR` Removes the maxinum integer.\n- `stringify(data: MIR): string` Returns the string respresentation of the given data (the opposite of parse()).\n- `flatten(data: MIR): number[]` Builds a flat array of integers. This may be slow and memory-consuming for large ranges such as '1-10000'.\n- `iterate(data: MIR): Iterable<number>` Returns an ES6 iterable object. See the description below.\n\nAvailable `options` that can be passed to `parse()`:\n\n- `parseNegative` (boolean, default = false): Enables parsing negative ranges (e.g., `(-10)-(-3)`).\n- `parseUnbounded` (boolean, default = false): Enables parsing unbounded ranges (e.g., `-5,10-`).\n\n## Iteration\n\nSince a `MultiIntegerRange` is just an array of `Range`s, if you naively iterate over it (e.g., in a for-of loop), you'll simply get each `Range` tuple one by one. To iterate each integer contained in the `MultiIntegerRange` instead, use `iterate()` like so:\n\n```ts\nconst ranges = mr.parse('2,5-7');\n\nfor (const page of ranges) {\n  console.log(page);\n} // prints 2 items: [2, 2] and [5, 7]\n\nfor (const page of mr.iterate(ranges)) {\n  console.log(page);\n} // prints 4 items: 2, 5, 6 and 7\n\n// array spreading (alternative of flatten())\nconst arr1 = [...mr.iterate(ranges)]; //=> [2, 5, 6, 7]\nconst arr2 = Array.from(mr.iterate(ranges)); //=> [2, 5, 6, 7]\n```\n\n## Tip\n\n### Combine Intersection and Unbounded Ranges\n\nIntersection is especially useful to \"trim\" unbounded ranges.\n\n```ts\nconst userInput = '-5,15-';\nconst pagesInMyDoc = [[1, 20]]; // '1-20'\nconst pagesToPrint = mr.intersect(\n  mr.parse(userInput, { parseUnbounded: true }),\n  pagesInMyDoc\n);\nfor (const page of mr.iterate(pagesToPrint)) await printPage(page);\n```\n\n## Legacy Classe-based API\n\nFor compatibility purposes, version 5 exports the `MultiRange` class and `multirange` function, which is mostly compatible with the 4.x API but has been rewritten to use the new functional API under the hood. See the [4.x documentation](https://github.com/smikitky/node-multi-integer-range/tree/v4.0.9) for the usage. The use of this compatibility layer is discouraged because it is not tree-shakable and has no performance merit. Use this only during migration. These may be removed in the future.\n\n## Changelog\n\nSee [CHANGELOG.md](CHANGELOG.md).\n\n## Caveats\n\n**Performance Considerations**: This library works efficiently for large ranges\nas long as they're _mostly_ continuous (e.g., `1-10240000,20480000-50960000`). However, this library is not intended to be efficient with a heavily fragmented set of integers that are scarcely continuous (e.g., random 10000 integers between 1 to 1000000).\n\n**No Integer Type Checks**: Make sure you are not passing floating-point `number`s\nto this library. For example, don't do `normalize(3.14)`. For performance reasons, the library does not check if a passed number is an integer. Passing a float will result in unexpected and unrecoverable behavior.\n\n## Development\n\nTo test:\n\n```\nnpm ci\nnpm test\n```\n\nTo generate CJS and ESM builds:\n\n```\nnpm ci\nnpm run build\n```\n\nPlease report bugs and suggestions using GitHub issues.\n\n## Author\n\nSoichiro Miki (https://github.com/smikitky)\n\n## License\n\nMIT\n","readmeFilename":"README.md","gitHead":"6b30b0cee7c97e04d856f02f78d1017760ecec7d","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@5.0.0-beta.1","_nodeVersion":"16.14.0","_npmVersion":"8.3.1","dist":{"integrity":"sha512-vLo+sOatEVYGwA6x0bOjp9/AbZnBULoeG0g/EH22Ty9tpsCyb3LmLETbwsl3enquOzBK+hh4vyBL9mAWKSRX0g==","shasum":"a4952e999409aba5bdf0e92e464643ede85b35d3","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-5.0.0-beta.1.tgz","fileCount":20,"unpackedSize":84357,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiKrniACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrMjg/9EgrCK6CK0/WjLjODi0zfsnk/eH7XsyBz9sbJkdTZBqQVgz5L\r\nI9qpWRWxU8GOtZMRf+YguIXkucFq2ZhwJ/HElExUr5jlIXCIF1Pb78ny6Xv0\r\noqrMYWIyhx5Th6MHwujUpqlBc7ajrckX+nJhPy1PA9OVLX47XC6bVl01t3P/\r\nlMV7PVRkwXNFuGKlrOYZ5ivd1Ec+5Dz4venSfPUMf4PGIw43BIp/jqs7A1Dk\r\nFBWE5eWxt4/O38NUxESV+XaLucOJdUqKviXJSueD3ARz4iMHtLEjttb/Oknz\r\nD4ssom95Yym8dPKTMd4ehyWkRbNRdbEY+59g6xKZBHbfyHT1s1M2XekaYWWM\r\nvy+BUccOcRrGu5stWpV+FCEDriAhe9MEru8jz0+qGhKJIO71BqNKGb2xjC4/\r\nATlC8FEd5MSTGFajKU1vZrrGJK2QAfhSrX9RxUH6EDJpdzSpJBOX/jMcTz6R\r\n+yUTeCZ2a/ctgXvHoyRuYIirzxQZc7Sr/hpkogyM1Tx9IVPmNzohN93Lvmb5\r\nXW1gGG1acmIFDjTyCnsIW4X0LwBgLe59JRJZKJFI5nZCZPIq/ytDtb8EEEN0\r\n5n4vxt7TXqgZooJYl9zzC8Fh6My6/hxOaLzfWcE78D6F0gMBHOaRjdof8HMN\r\ny00nOd+gsAzbMLa9/pjxJbq5ZPJBlUttl50=\r\n=Ept4\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDhxTwSLagw4XSaOqdm1eFZdI7hgL7kvdwvkaoJX9nA7AiBAxlDP3OQfamr4iBZ670bo9q+3W0g2UB00BJkiJUHd7w=="}]},"_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"directories":{},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/multi-integer-range_5.0.0-beta.1_1646967266195_0.7785192323793144"},"_hasShrinkwrap":false},"5.0.0-rc.0":{"name":"multi-integer-range","version":"5.0.0-rc.0","description":"Parses and manipulates multiple comma-separated integer ranges (eg 1-3,8-10)","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"sideEffects":false,"main":"./lib/cjs/index.js","module":"./lib/esm/index.js","exports":{"import":"./lib/esm/index.js","require":"./lib/cjs/index.js"},"types":"./lib/cjs/index.d.ts","scripts":{"test":"jest --coverage","clean":"rimraf lib","build":"npm run clean && tsc -p tsconfig-esm.json && tsc -p tsconfig-cjs.json && node postbuild.js","prepack":"npm run build","prettier":"prettier --write src/**/*.{ts,js}"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"@types/jest":"^27.4.1","jest":"^27.5.1","jest-ts-webcompat-resolver":"^1.0.0","prettier":"^2.5.1","rimraf":"^3.0.2","ts-jest":"^27.1.3","typescript":"^4.6.2"},"prettier":{"singleQuote":true,"arrowParens":"avoid","trailingComma":"none"},"runkitExampleFilename":"example.js","readme":"# multi-integer-range\n\n[![Build Status](https://github.com/smikitky/node-multi-integer-range/actions/workflows/tests.yml/badge.svg)](https://github.com/smikitky/node-multi-integer-range/actions)\n[![Coverage Status](https://coveralls.io/repos/github/smikitky/node-multi-integer-range/badge.svg?branch=dev)](https://coveralls.io/github/smikitky/node-multi-integer-range)\n[![npm version](https://badge.fury.io/js/multi-integer-range.svg)](https://badge.fury.io/js/multi-integer-range)\n\nA small library that parses comma-delimited integer ranges (such as `\"1-3,8-10\"`) and manipulates such range data. This type of data is commonly used to specify which lines to highlight or which pages to print.\n\nSupported operations:\n\n- Addition (e.g., `1-2,6` + `3-5` &rarr; `1-6`)\n- Subtraction (e.g., `1-10` - `5-9` &rarr; `1-4,10`)\n- Inclusion check (e.g., `3,7-9` &sub; `1-10`)\n- Intersection (e.g., `1-5` &cap; `2-8` &rarr; `2-5`)\n- Unbounded ranges (aka infinite ranges, e.g., `5-`, meaning \"all integers &ge; 5\")\n- Ranges including negative integers or zero\n- ES6 iterator (`for ... of`, spread operator)\n- Array creation (\"flatten\")\n\nThe range data are always _sorted and normalized_ to the smallest possible representation.\n\n🚨 **Note (2022-03-11)** 🚨: The following README is for the 5.0.0 Release Candidate. For the docs of the stable (4.x, @latest) release, check the NPM site. You can install the RC using `npm install multi-integer-range@next`. The RC is feature complete, and the current plan is to release the stable version in a few months.\n\n## Install\n\nInstall via npm or yarn:\n\n```\nnpm install multi-integer-range\n```\n\nVersion 5 provides both CommonJS and ESM builds. Bundlers such as Webpack can automatically pick the ESM version and perform tree-shaking. This package has no external dependencies nor does it use any Node-specific API.\n\n🚨 The API style has changed drastically in version 5. The new API is slightly more verbose, but is simpler and tree-shakable 🌲. See the [CHANGELOG](./CHANGELOG.md) and the [docs for version 4](https://github.com/smikitky/node-multi-integer-range/tree/v4.0.9).\n\n<details>\n<summary>Deno & Modern Browsers</summary>\nDeno users can use Skypack CDN:\n\n```ts\nimport * as mr from 'https://cdn.skypack.dev/multi-integer-range?dts';\n```\n\nAlthough not recommended from a performance standpoint, modern browsers can directly load this package as a standard ES module via CDN:\n\n```html\n<script type=\"module\">\n  import * as mr from 'https://cdn.skypack.dev/multi-integer-range';\n  console.log(mr.parse('7,6,5'));\n</script>\n```\n\nNote that you probably want to fixate the version, e.g., multi-integer-range@5.0.3\n\n</details>\n\n## Basic Example\n\n<!-- prettier-ignore -->\n```js\nimport * as mr from 'multi-integer-range';\n\nconst ranges1 = mr.parse('1-6,9-12'); // [[1, 6], [9, 12]]\nconst ranges2 = mr.parse('7-10, 100'); // [[7, 10], [100, 100]]\nconst ranges3 = mr.normalize([1, 5, 6, [4, 2]]); // [[1, 6]]\n\nconst sum = mr.append(ranges1, ranges2); // [[1, 12], [100, 100]]\nconst diff = mr.subtract(ranges1, ranges2); // [[1, 6], [11, 12]]\nconst commonValues = mr.intersect(ranges1, ranges2); // [[9, 10]]\n\nconst str = mr.stringify(sum); // \"1-12,100\"\nconst bool = mr.has(ranges1, ranges3); // true\nconst isSame = mr.equals(ranges1, ranges2); // false\nconst array = mr.flatten(diff); // [1, 2, 3, 4, 5, 6, 11, 12]\nconst len = mr.length(ranges1); // 10\n```\n\n## Creating a _normalized_ MultiIntegerRange\n\nThe fundamental data structure of this package is a **normalized** array of `[min, max]` tuples, as shown below. Here, \"normalized\" means the range data is in the smallest possible representation and is sorted in ascending order. You can denote an unbounded range using the JavaScript constant `Infinity`.\n\n<!-- prettier-ignore -->\n```ts\ntype Range = readonly [min: number, max: number];\ntype MultiIntegerRange = readonly Range[];\ntype MIR = MultiIntegerRange; // short alias\n\n// Examples of normalized MultiIntegerRanges\n[[1, 3], [5, 6], [9, 12]] // 1-3,5-6,9-12\n[[-Infinity, 4], [7, 7], [10, Infinity]] // -4,7,10-\n[[-Infinity, Infinity]] // all integers\n[] // empty\n\n// These are NOT normalized. Don't pass them to append() and such!\n[[3, 1]] // min is larger than max\n[[7, 9], [1, 4]] // not in the ascending order\n[[1, 5], [3, 7]] // there is an overlap\n[[1, 2], [3, 4]] // the two ranges can be combined to \"1-4\"\n[[Infinity, Infinity]] // makes no sense\n```\n\nMost functions take one or two **normalized** `MultiIntegerRange`s as shown above to work correctly. To produce a valid normalized `MultiIntegerRange`, you can use `normalize()` or `parse()`. (You can write a normalized `MultiIntgerRange` by hand as shown above, too.)\n\n`normalize(data?: number | (number | Range)[])` creates a normalized `MultiIntegerRange` from a single integer or an unsorted array of integers/`Range`s. This is the only function that can safely take an unsorted array. Do not pass unnormalized range data to other functions.\n\n<!-- prettier-ignore -->\n```ts\nconsole.log(mr.normalize(10)); // [[10, 10]]\nconsole.log(mr.normalize([3, 1, 2, 4, 5])); // [[1, 5]]\nconsole.log(mr.normalize([5, [2, 0], 6])); // [[0, 2], [5, 6]]\nconsole.log(mr.normalize([7, 7, 10, 7, 7])); // [[7, 7], [10, 10]]\nconsole.log(mr.normalize()); // []\n\n// Do not directly pass an unnormalized array\n// to functions other than normalize().\nconst unsorted = [[3, 1], [2, 8]];\nconst wrong = mr.length(unsorted); // This won't work!\nconst correct = mr.length(mr.normalize(unsorted)); // 8\n```\n\n`parse(data: string, options?: Options)` creates a normalized `MultiIntegerRange` from a string. The string parser is permissive and accepts space characters before/after comma/hyphens. It calls `normalize()` under the hood, so the order is not important, and overlapped numbers are silently ignored.\n\n```ts\nconsole.log(mr.parse('1-3,10')); // [[1, 3], [10, 10]]\nconsole.log(mr.parse('3,\\t8-3,2,3,\\n10, 9 - 7 ')); // [[2, 10]]\n```\n\nBy default, the string parser does not try to parse unbounded ranges or negative integers. You need to pass an `options` object to modify the parsing behavior. To avoid ambiguity, all negative integers must always be enclosed in parentheses. If you don't like the default `parse()`, you can always create and use your custom parsing function instead, as long as it returns a normalized `MultiIntegerRange`.\n\n```ts\nconsole.log(mr.parse('7-')); // throws a SyntaxError\n\nconsole.log(mr.parse('7-', { parseUnbounded: true })); // [[7, Infinity]]\nconsole.log(mr.parse('(-7)-(-1)', { parseNegative: true })); // [[-7, -1]]\nconsole.log(\n  mr.parse('0-,(-6)-(-2),-(-100)', {\n    parseUnbounded: true,\n    parseNegative: true\n  })\n); // [[-Infinity, -100], [-6, -2], [0, Infinity]]\n```\n\n## API Reference\n\nAll functions are \"pure\", and are exported as named exports. They do not change the input data nor do they have any side effects. All `MultiIntegerRange`s returned by these functions are normalized. `MIR` is just a short alias for `MultiIntegerRange` (also available in d.ts).\n\n- `parse(data: string, options?: Options): MIR` Parses the given string. See below for the options.\n- `normalize(data?: number | (number | Range)[]): MIR` Normalizes the given number or the array of numbers/Ranges.\n- `append(a: MIR, b: MIR): MIR` Appends the two values.\n- `subtract(a: MIR, b: MIR): MIR` Subtracts `b` from `a`.\n- `intersect(a: MIR, b: MIR): MIR` Calculates the interesction, i.e., integers that belong to both `a` and `b`.\n- `has(a: MIR, b: MIR): boolean` Checks if `b` is equal to or a subset of `a`.\n- `length(data: MIR): number` Calculates how many numbers are effectively included in the given data (i.e., 5 for '3,5-7,9'). Returns Inifnity for unbounded ranges.\n- `equals(a: MIR, b: MIR): boolean` Checks if `a` and `b` contains the same range data. (If you like, you can use other deep-equal utilities instead.)\n- `isUnbounded(data: MIR): boolean` Returns true if the instance is unbounded.\n- `min(data: MIR): number | undefined` Returns the minimum integer. May return -Infinity.\n- `max(data: MIR): number | undefined` Returns the maxinum integer. May return Infinity.\n- `tail(data: MIR): MIR` Removes the minimum integer.\n- `init(data: MIR): MIR` Removes the maxinum integer.\n- `stringify(data: MIR): string` Returns the string respresentation of the given data (the opposite of parse()).\n- `flatten(data: MIR): number[]` Builds a flat array of integers. This may be slow and memory-consuming for large ranges such as '1-10000'.\n- `iterate(data: MIR): Iterable<number>` Returns an ES6 iterable object. See the description below.\n\nAvailable `options` that can be passed to `parse()`:\n\n- `parseNegative` (boolean, default = false): Enables parsing negative ranges (e.g., `(-10)-(-3)`).\n- `parseUnbounded` (boolean, default = false): Enables parsing unbounded ranges (e.g., `-5,10-`).\n\n## Iteration\n\nSince a `MultiIntegerRange` is just an array of `Range`s, if you naively iterate over it (e.g., in a for-of loop), you'll simply get each `Range` tuple one by one. To iterate each integer contained in the `MultiIntegerRange` instead, use `iterate()` like so:\n\n```ts\nconst ranges = mr.parse('2,5-7');\n\nfor (const page of ranges) {\n  console.log(page);\n} // prints 2 items: [2, 2] and [5, 7]\n\nfor (const page of mr.iterate(ranges)) {\n  console.log(page);\n} // prints 4 items: 2, 5, 6 and 7\n\n// array spreading (alternative of flatten())\nconst arr1 = [...mr.iterate(ranges)]; //=> [2, 5, 6, 7]\nconst arr2 = Array.from(mr.iterate(ranges)); //=> [2, 5, 6, 7]\n```\n\n## Tip\n\n### Combine Intersection and Unbounded Ranges\n\nIntersection is especially useful to \"trim\" unbounded ranges.\n\n```ts\nconst userInput = '-5,15-';\nconst pagesInMyDoc = [[1, 20]]; // '1-20'\nconst pagesToPrint = mr.intersect(\n  mr.parse(userInput, { parseUnbounded: true }),\n  pagesInMyDoc\n);\nfor (const page of mr.iterate(pagesToPrint)) await printPage(page);\n```\n\n## Legacy Classe-based API\n\nFor compatibility purposes, version 5 exports the `MultiRange` class and `multirange` function, which is mostly compatible with the 4.x API but has been rewritten to use the new functional API under the hood. See the [4.x documentation](https://github.com/smikitky/node-multi-integer-range/tree/v4.0.9) for the usage. The use of this compatibility layer is discouraged because it is not tree-shakable and has no performance merit. Use this only during migration. These may be removed in the future.\n\n## Changelog\n\nSee [CHANGELOG.md](CHANGELOG.md).\n\n## Caveats\n\n**Performance Considerations**: This library works efficiently for large ranges\nas long as they're _mostly_ continuous (e.g., `1-10240000,20480000-50960000`). However, this library is not intended to be efficient with a heavily fragmented set of integers that are scarcely continuous (e.g., random 10000 integers between 1 to 1000000).\n\n**No Integer Type Checks**: Make sure you are not passing floating-point `number`s\nto this library. For example, don't do `normalize(3.14)`. For performance reasons, the library does not check if a passed number is an integer. Passing a float will result in unexpected and unrecoverable behavior.\n\n## Development\n\nTo test:\n\n```\nnpm ci\nnpm test\n```\n\nTo generate CJS and ESM builds:\n\n```\nnpm ci\nnpm run build\n```\n\nPlease report bugs and suggestions using GitHub issues.\n\n## Author\n\nSoichiro Miki (https://github.com/smikitky)\n\n## License\n\nMIT\n","readmeFilename":"README.md","gitHead":"a2a43c75a12befd97124a133828ea21a3df34969","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@5.0.0-rc.0","_nodeVersion":"16.14.0","_npmVersion":"8.3.1","dist":{"integrity":"sha512-JNZ2C880bJ3vCIJFTUbB47lqa0iMPbwL0us+yjATdZ+ZgshRYSQJzEmZGXlmnwJOHMqBIA+AfEMrtJE/mQfuVw==","shasum":"9c9a9ddd374aba20d4684c7de61b52b7f4662479","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-5.0.0-rc.0.tgz","fileCount":20,"unpackedSize":84929,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiKujPACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrCQQ//RCPblr73RagteGYC4ORMxXlagIZDFUw/tJxBc+ZhsJkval/b\r\n7rylPtHoa4QOKj5tQuaUhR2Hr8N+s9oWNILGcqzY45t06vHb6kMIKyqLmd50\r\n3hqpemtguiJvoimFOBRUUMtozJkW7xFM6dAmji79UfhfaZI8Ap5j/nwXIl1h\r\nYUsfI2o6r6TwP6jNM5fpm0i8xTIxj2nOZIXtUqBOktVYzaIkINQ99hBimKWh\r\nh84KzB+FqknpWABnwMgPC8cfD62YF6zqjD+NZ/FhvsCTd0E6PLjlDaAODCK6\r\n5xwZpWLeU39zM+KNu6Lh9iQxUzRBPTYi1LOYwEkrMdmJDRIhQwxSqPtwLU6b\r\nNyRMkAjVU+DEeYckTO9be6e9wT5wwbZuZaHts/d7GaRHPx4IT2/iIb1iM/r+\r\nHzRiL1dVDK0sqejS0u3YRWljOQuv081YITrR/XSW3YpZI1QmTmpgvAHQSgdQ\r\nyCcbmNbRnNC4fQXtlrRSNlnX0Vw+rXGt4azvaoUk4CbHOBC18os+8EFMfJHq\r\nC5PXZPFGvESHyLvrFTdW5Gp02vJctC9cS3/tundQ3L2eEBPfJuHaX3MtDkmX\r\nFOf42iscorGhQaoDNkeIa246WWvXZCY4z0gyhBTaIBk6wChM6WMgza6+c27m\r\n9m9UAUd9tCprxB2WLK595avEvDLl/+DmpLg=\r\n=3Bmc\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCRd0Csowc3PQlpC6wpgS+NjWc/ZnBh5ZDc74g8HrXQMwIhAPw8G3cV4IYW6gCNhpBvH4u5cgpOFUExXbvITkCaMBzT"}]},"_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"directories":{},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/multi-integer-range_5.0.0-rc.0_1646979279708_0.07205486870888689"},"_hasShrinkwrap":false},"5.0.0-rc.1":{"name":"multi-integer-range","version":"5.0.0-rc.1","description":"Parses and manipulates multiple comma-separated integer ranges (eg 1-3,8-10)","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"sideEffects":false,"main":"./lib/cjs/index.js","module":"./lib/esm/index.js","exports":{"import":"./lib/esm/index.js","require":"./lib/cjs/index.js"},"types":"./lib/cjs/index.d.ts","scripts":{"test":"jest --coverage","clean":"rimraf lib","build":"npm run clean && tsc -p tsconfig-esm.json && tsc -p tsconfig-cjs.json && node postbuild.js","prepack":"npm run build","prettier":"prettier --write src/**/*.{ts,js}"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"@types/jest":"^27.4.1","jest":"^27.5.1","jest-ts-webcompat-resolver":"^1.0.0","prettier":"^2.5.1","rimraf":"^3.0.2","ts-jest":"^27.1.3","typescript":"^4.6.2"},"prettier":{"singleQuote":true,"arrowParens":"avoid","trailingComma":"none"},"runkitExampleFilename":"example.js","readme":"# multi-integer-range\n\n[![Build Status](https://github.com/smikitky/node-multi-integer-range/actions/workflows/tests.yml/badge.svg)](https://github.com/smikitky/node-multi-integer-range/actions)\n[![Coverage Status](https://coveralls.io/repos/github/smikitky/node-multi-integer-range/badge.svg?branch=dev)](https://coveralls.io/github/smikitky/node-multi-integer-range)\n[![npm version](https://badge.fury.io/js/multi-integer-range.svg)](https://badge.fury.io/js/multi-integer-range)\n\nA small library that parses comma-delimited integer ranges (such as `\"1-3,8-10\"`) and manipulates such range data. This type of data is commonly used to specify which lines to highlight or which pages to print.\n\nSupported operations:\n\n- Addition (e.g., `1-2,6` + `3-5` &rarr; `1-6`)\n- Subtraction (e.g., `1-10` - `5-9` &rarr; `1-4,10`)\n- Inclusion check (e.g., `3,7-9` &sub; `1-10`)\n- Intersection (e.g., `1-5` &cap; `2-8` &rarr; `2-5`)\n- Unbounded ranges (aka infinite ranges, e.g., `5-`, meaning \"all integers &ge; 5\")\n- Ranges including negative integers or zero\n- ES6 iterator (`for ... of`, spread operator)\n- Array creation (\"flatten\")\n\nThe range data are always _sorted and normalized_ to the smallest possible representation.\n\n---\n\n🚨 **Note (2022-03-11)** 🚨: The following README is for the 5.0.0 Release Candidate. For the docs of the stable (4.x, @latest) release, check the NPM site. You can install the RC using `npm install multi-integer-range@next`. The RC is feature complete, and the current plan is to release the stable version in a few months.\n\n## Install\n\nInstall via npm or yarn:\n\n```\nnpm install multi-integer-range\n```\n\nVersion 5 is a hybrid package; it provides both a CommonJS version and an ES Module version built from the same TypeScript source. Bundlers such as Webpack can automatically pick the ESM version and perform tree-shaking. This package has no external dependencies nor does it use any Node-specific API.\n\n🚨 The API style has changed drastically in version 5. The new API is slightly more verbose, but is simpler and tree-shakable 🌲. For example, if you don't use the default parser, your bundle will not include it. See the [CHANGELOG](./CHANGELOG.md) and the [docs for version 4](https://github.com/smikitky/node-multi-integer-range/tree/v4.0.9).\n\n<details>\n<summary>Deno & Modern Browsers</summary>\nDeno users can use Skypack CDN:\n\n```ts\nimport * as mr from 'https://cdn.skypack.dev/multi-integer-range?dts';\n```\n\nAlthough not recommended from a performance standpoint, modern browsers can directly load this package as a standard ES module via CDN:\n\n```html\n<script type=\"module\">\n  import * as mr from 'https://cdn.skypack.dev/multi-integer-range';\n  console.log(mr.parse('7,6,5'));\n</script>\n```\n\nNote that you probably want to fixate the version, e.g., multi-integer-range@5.0.3\n\n</details>\n\n## Basic Example\n\n<!-- prettier-ignore -->\n```js\nimport * as mr from 'multi-integer-range';\n\nconst ranges1 = mr.parse('1-6,9-12'); // [[1, 6], [9, 12]]\nconst ranges2 = mr.parse('7-10, 100'); // [[7, 10], [100, 100]]\nconst ranges3 = mr.normalize([1, 5, 6, [4, 2]]); // [[1, 6]]\n\nconst sum = mr.append(ranges1, ranges2); // [[1, 12], [100, 100]]\nconst diff = mr.subtract(ranges1, ranges2); // [[1, 6], [11, 12]]\nconst commonValues = mr.intersect(ranges1, ranges2); // [[9, 10]]\n\nconst str = mr.stringify(sum); // \"1-12,100\"\nconst bool = mr.has(ranges1, ranges3); // true\nconst isSame = mr.equals(ranges1, ranges2); // false\nconst array = mr.flatten(diff); // [1, 2, 3, 4, 5, 6, 11, 12]\nconst len = mr.length(ranges1); // 10\n```\n\n## Creating a _normalized_ MultiIntegerRange\n\nThe fundamental data structure of this package is a **normalized** array of `[min, max]` tuples, as shown below. Here, \"normalized\" means the range data is in the smallest possible representation and is sorted in ascending order. You can denote an unbounded range using the JavaScript constant `Infinity`.\n\n<!-- prettier-ignore -->\n```ts\ntype Range = readonly [min: number, max: number];\ntype MultiIntegerRange = readonly Range[];\ntype MIR = MultiIntegerRange; // short alias\n\n// Examples of normalized MultiIntegerRanges\n[[1, 3], [5, 6], [9, 12]] // 1-3,5-6,9-12\n[[-Infinity, 4], [7, 7], [10, Infinity]] // -4,7,10-\n[[-Infinity, Infinity]] // all integers\n[] // empty\n\n// These are NOT normalized. Don't pass them to append() and such!\n[[3, 1]] // min is larger than max\n[[7, 9], [1, 4]] // not in the ascending order\n[[1, 5], [3, 7]] // there is an overlap of ranges\n[[1, 2], [3, 4]] // the two ranges can be combined to \"1-4\"\n[[Infinity, Infinity]] // makes no sense\n```\n\nMost functions take one or two **normalized** `MultiIntegerRange`s as shown above to work correctly. To produce a valid normalized `MultiIntegerRange`, you can use `normalize()`, `parse()` or `initialize()`. (You can write a normalized `MultiIntgerRange` by hand as shown above, too.)\n\n`normalize(data?: number | (number | Range)[])` creates a normalized `MultiIntegerRange` from a single integer or an unsorted array of integers/`Range`s. This and `initialize` are the only functions that can safely take an unsorted array. Do not pass unnormalized range data to other functions.\n\n<!-- prettier-ignore -->\n```ts\nconsole.log(mr.normalize(10)); // [[10, 10]]\nconsole.log(mr.normalize([3, 1, 2, 4, 5])); // [[1, 5]]\nconsole.log(mr.normalize([5, [2, 0], 6, 4])); // [[0, 2], [4, 6]]\nconsole.log(mr.normalize([7, 7, 10, 7, 7])); // [[7, 7], [10, 10]]\nconsole.log(mr.normalize()); // []\n\n// Do not directly pass an unnormalized array\n// to functions other than normalize().\nconst unsorted = [[3, 1], [2, 8]];\nconst wrong = mr.length(unsorted); // This won't work!\nconst correct = mr.length(mr.normalize(unsorted)); // 8\n```\n\n`parse(data: string, options?: Options)` creates a normalized `MultiIntegerRange` from a string. The string parser is permissive and accepts space characters before/after comma/hyphens. It calls `normalize()` under the hood, so the order is not important, and overlapped numbers are silently ignored.\n\n```ts\nconsole.log(mr.parse('1-3,10')); // [[1, 3], [10, 10]]\nconsole.log(mr.parse('3,\\t8-3,2,3,\\n10, 9 - 7 ')); // [[2, 10]]\n```\n\nBy default, the string parser does not try to parse unbounded ranges or negative integers. You need to pass an `options` object to modify the parsing behavior. To avoid ambiguity, all negative integers must always be enclosed in parentheses. If you don't like the default `parse()`, you can always create and use your custom parsing function instead, as long as it returns a normalized `MultiIntegerRange`.\n\n```ts\nconsole.log(mr.parse('7-')); // throws a SyntaxError\n\nconsole.log(mr.parse('7-', { parseUnbounded: true })); // [[7, Infinity]]\nconsole.log(mr.parse('(-7)-(-1)', { parseNegative: true })); // [[-7, -1]]\nconsole.log(\n  mr.parse('0-,(-6)-(-2),-(-100)', {\n    parseUnbounded: true,\n    parseNegative: true\n  })\n); // [[-Infinity, -100], [-6, -2], [0, Infinity]]\n```\n\n## API Reference\n\nAll functions are _pure_; they do not change the input data nor do they have any side effects. All functions are exported as named exports. All `MultiIntegerRange`s returned by these functions are normalized. `MIR` is just a short alias for `MultiIntegerRange` (also available in d.ts).\n\n- `parse(data: string, options?: Options): MIR` Parses the given string. See below for the options.\n- `normalize(data?:(number | Range)[] | number): MIR` Normalizes the given number or the array of numbers/Ranges.\n- `initialize(data?: (number | Range)[] | number | string)`: Conditionally calls either `parse` or `normalize` and returns a new MultiIntegerRange. This takes an \"Initializer\" in version &lte; 4.\n- `append(a: MIR, b: MIR): MIR` Appends the two values.\n- `subtract(a: MIR, b: MIR): MIR` Subtracts `b` from `a`.\n- `intersect(a: MIR, b: MIR): MIR` Calculates the interesction, i.e., integers that belong to both `a` and `b`.\n- `has(a: MIR, b: MIR): boolean` Checks if `b` is equal to or a subset of `a`.\n- `length(data: MIR): number` Calculates how many numbers are effectively included in the given data (i.e., 5 for '3,5-7,9'). Returns Inifnity for unbounded ranges.\n- `equals(a: MIR, b: MIR): boolean` Checks if `a` and `b` contains the same range data. (If you like, you can use other deep-equal utilities instead.)\n- `isUnbounded(data: MIR): boolean` Returns true if the instance is unbounded.\n- `min(data: MIR): number | undefined` Returns the minimum integer. May return -Infinity.\n- `max(data: MIR): number | undefined` Returns the maxinum integer. May return Infinity.\n- `tail(data: MIR): MIR` Removes the minimum integer.\n- `init(data: MIR): MIR` Removes the maxinum integer.\n- `stringify(data: MIR): string` Returns the string respresentation of the given data (the opposite of parse()).\n- `flatten(data: MIR): number[]` Builds a flat array of integers. This may be slow and memory-consuming for large ranges such as '1-10000'.\n- `iterate(data: MIR): Iterable<number>` Returns an ES6 iterable object. See the description below.\n\nAvailable `options` that can be passed to `parse()`:\n\n- `parseNegative` (boolean, default = false): Enables parsing negative ranges (e.g., `(-10)-(-3)`).\n- `parseUnbounded` (boolean, default = false): Enables parsing unbounded ranges (e.g., `-5,10-`).\n\n## Iteration\n\nSince a `MultiIntegerRange` is just an array of `Range`s, if you naively iterate over it (e.g., in a for-of loop), you'll simply get each `Range` tuple one by one. To iterate each integer contained in the `MultiIntegerRange` instead, use `iterate()` like so:\n\n```ts\nconst ranges = mr.parse('2,5-7');\n\nfor (const page of ranges) {\n  console.log(page);\n} // prints 2 items: [2, 2] and [5, 7]\n\nfor (const page of mr.iterate(ranges)) {\n  console.log(page);\n} // prints 4 items: 2, 5, 6 and 7\n\n// array spreading (alternative of flatten())\nconst arr1 = [...mr.iterate(ranges)]; //=> [2, 5, 6, 7]\nconst arr2 = Array.from(mr.iterate(ranges)); //=> [2, 5, 6, 7]\n```\n\n## Tip\n\n### Combine Intersection and Unbounded Ranges\n\nIntersection is especially useful to \"trim\" unbounded ranges.\n\n```ts\nconst userInput = '-5,15-';\nconst pagesInMyDoc = [[1, 20]]; // '1-20'\nconst pagesToPrint = mr.intersect(\n  mr.parse(userInput, { parseUnbounded: true }),\n  pagesInMyDoc\n);\nfor (const page of mr.iterate(pagesToPrint)) await printPage(page);\n```\n\n## Legacy Classe-based API\n\nFor compatibility purposes, version 5 exports the `MultiRange` class and `multirange` function, which is mostly compatible with the 4.x API but has been rewritten to use the new functional API under the hood. See the [4.x documentation](https://github.com/smikitky/node-multi-integer-range/tree/v4.0.9) for the usage. The use of this compatibility layer is discouraged because it is not tree-shakable and has no performance merit. Use this only during migration. These may be removed in the future.\n\n## Changelog\n\nSee [CHANGELOG.md](CHANGELOG.md).\n\n## Caveats\n\n**Performance Considerations**: This library works efficiently for large ranges\nas long as they're _mostly_ continuous (e.g., `1-10240000,20480000-50960000`). However, this library is not intended to be efficient with a heavily fragmented set of integers that are scarcely continuous (e.g., random 10000 integers between 1 to 1000000).\n\n**No Integer Type Checks**: Make sure you are not passing floating-point `number`s\nto this library. For example, don't do `normalize(3.14)`. For performance reasons, the library does not check if a passed number is an integer. Passing a float will result in unexpected and unrecoverable behavior.\n\n## Development\n\nTo test:\n\n```\nnpm ci\nnpm test\n```\n\nTo generate CJS and ESM builds:\n\n```\nnpm ci\nnpm run build\n```\n\nPlease report bugs and suggestions using GitHub issues.\n\n## Author\n\nSoichiro Miki (https://github.com/smikitky)\n\n## License\n\nMIT\n","readmeFilename":"README.md","gitHead":"fed5c793433c82f6374debf63120ad7bd26d4631","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@5.0.0-rc.1","_nodeVersion":"16.14.0","_npmVersion":"8.3.1","dist":{"integrity":"sha512-2THADnrIdKU3f65ZqiPKJB1IXD3DmJ9uXqu6XWvU0hFhKOEq2KTifgc2qQRMT7ChG8qyDPWUsbysw+EFDaa3qg==","shasum":"4d8f103c151e378a006906d0e3bc6bbad4ab49cf","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-5.0.0-rc.1.tgz","fileCount":20,"unpackedSize":89079,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiL/DPACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoBCQ//TN8SKmZiteJpZzCahuCDLzSuJEh6aRzDh4CxtMuy+0uaZ/ms\r\nLZRUNrE481pzM8fUWOIlO43dcz7hNjPPTmIhn28qO0lkPzDLNrweQkBwMMVO\r\ntJyX0YRHfX1j6LzPni3dCiGpC+bKcfshXt4usL8C5nMQWAkPOfkv+NpPfEk6\r\nLzLWYPcdUxbxW6iYWPWKz/vi1diPcmQmnAuuKoY9rmqJTF62xguU8CuKrjtr\r\nfqEA1WPtp7MPhkDz80iYU+Y0Qus5etfPz2q/pYEnZUeBJ8yVrGjYA0zGMhKJ\r\nV6uxO/AhqGXn3GMLCBUkZi7FdeIXpUC6s0VFmxcL1zPSBqO3nvLofN07fGHr\r\nQsQxfI1QUac1NgjBtgdcUOIa1yQZHFRk+Dw/F8APQqNLLhpYf68dLY1XeQhW\r\n8SPVuHCSwVDy4BvU9bwRWUNWVLh1GWFscRzun70mPQiLmdstC2vmVLub50h9\r\nEDAk6GucLi8rk4XQR4hEqaPOvtOnBhq9Cp8cq5R0zNwKYxb5IGFNuBJWKdc9\r\nGGE1I00/hYB7tVNMCN1oaicllsl79NSiz8qF0iWsdwPWD2jNZfORxUMkglH3\r\nBIydQV7Tlf+/8dy8fSj6rk9MezNH5W/1iXrWdscWo3SnIvc1I//zkbTQqj9x\r\nIxLOYVdThtwogJjTkyWsBLSLRtOkN9qffGI=\r\n=FQau\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCSNX9YtZVfmTloaLSL2p0rdrv/VrdLLtOAEGzXOeFwDAIgJW7BLG1imcJ1AznY9dzvbbLJnuSH37piPExPg6qVOI8="}]},"_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"directories":{},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/multi-integer-range_5.0.0-rc.1_1647309007335_0.054643427644307074"},"_hasShrinkwrap":false},"5.0.0-rc.2":{"name":"multi-integer-range","version":"5.0.0-rc.2","description":"Parses and manipulates multiple comma-separated integer ranges (eg 1-3,8-10)","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"sideEffects":false,"main":"./lib/cjs/index.js","module":"./lib/esm/index.js","exports":{"import":"./lib/esm/index.js","require":"./lib/cjs/index.js"},"types":"./lib/cjs/index.d.ts","scripts":{"test":"jest --coverage","doc":"node scripts/docgen.js","clean":"rimraf lib","build":"npm run clean && tsc -p tsconfig-esm.json && tsc -p tsconfig-cjs.json && node scripts/postbuild.js","prepack":"npm run build","prettier":"prettier --write src/**/*.{ts,js}"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"@types/jest":"^27.4.1","jest":"^27.5.1","jest-ts-webcompat-resolver":"^1.0.0","prettier":"^2.5.1","rimraf":"^3.0.2","ts-jest":"^27.1.3","typescript":"^4.6.2"},"prettier":{"singleQuote":true,"arrowParens":"avoid","trailingComma":"none"},"runkitExampleFilename":"example.js","gitHead":"eb55ddd7efac4c9a34711300e89c15a314e8d7a7","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@5.0.0-rc.2","_nodeVersion":"16.14.0","_npmVersion":"8.3.1","dist":{"integrity":"sha512-KE1fqseUkJuq7f7AD5NJqIuGxB8LWqttzvYfvc+E/uE51yKjRDKBAiyIc/F8sPiD2ez5BW3XPZZ1/yrdYr1jdw==","shasum":"fe245cda1555ad314cbd099dc472be0ba083b44d","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-5.0.0-rc.2.tgz","fileCount":21,"unpackedSize":105680,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiMHp6ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrWAA//WExTarigjqneV0w+Jiy21x7Yq+r0BywjaJnyh6/JxmBqRzJV\r\nkQgNlE4vQ3hk9duDMBgXkyeV5VCWfaYY7Da/BmhYbMM9dC4rGj1q4miQx8fU\r\nFESkRxentazLHWuE3TuG+O1QCceBcS3gDpoYG8NstfEmJxmP1eKbYfpuqdix\r\nKM9/u0og94YI+IXRRn2aA52CbUMY3BYBTdI3VXA/TqtEdU4Tu7d7tLl1HI97\r\n9qzVivdHuiJpWtf8v4GfxuSaDHnNaEVW2hM37dSxcIfCJ3y75Yr4YOQYNL3j\r\nZvKqdKgnjW4d+P9ey5G5RwS5bqsOTV0BTQlQjHmsOUQ+XIoCjOXosagL/w1S\r\n6/pjg9altRMM3kalU2s8S60dbQrp0F/4lPDFpO8SKvwd0PPRKR/w2pSwF4fs\r\nNMYRpgblGUYuRlm9r9uMUnFG7tqGx8MyHZ3uJVUsQhQEhDRb73K+m3ChQtgH\r\nKZfim3LPjwJJ22GaxAwxQ2MsvJgdR8tNiITdY1IEZsmMgKRMynkIh+UBndDR\r\nnTs6ECNMlDKMg0A1p/BWSd83dYu1x/GBGOzqFj49+xhljTDThVD5ktGL3FAT\r\ncMDla6unH3PZsyNV+L57PokB/okRUAqhfhbLR4wPAkaeM7Rr+tBuE1JvaDGn\r\nYoOBs9f0IzyCskVMuHASSyJKxBnMq4Xjmg8=\r\n=qlKP\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCID4JVRftumJ1+uIHhSItiQYxUWgsVDw6oe47rF1QlMTvAiAkS/GWsqsYN6v65VFUhijdHeDaUZ+ytTw/pF6x8twHBQ=="}]},"_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"directories":{},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/multi-integer-range_5.0.0-rc.2_1647344250333_0.8070645972035444"},"_hasShrinkwrap":false},"5.0.0":{"name":"multi-integer-range","version":"5.0.0","description":"Parses and manipulates multiple comma-separated integer ranges (eg 1-3,8-10)","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"sideEffects":false,"main":"./lib/cjs/index.js","module":"./lib/esm/index.js","exports":{"import":"./lib/esm/index.js","require":"./lib/cjs/index.js"},"types":"./lib/cjs/index.d.ts","scripts":{"test":"jest --coverage","doc":"node scripts/docgen.js","clean":"rimraf lib","build":"npm run clean && tsc -p tsconfig-esm.json && tsc -p tsconfig-cjs.json && node scripts/postbuild.js","prepack":"npm run build","prettier":"prettier --write src/**/*.{ts,js}"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"@types/jest":"^27.4.1","jest":"^27.5.1","jest-ts-webcompat-resolver":"^1.0.0","prettier":"^2.5.1","rimraf":"^3.0.2","ts-jest":"^27.1.3","typescript":"^4.6.2"},"prettier":{"singleQuote":true,"arrowParens":"avoid","trailingComma":"none"},"runkitExampleFilename":"example.js","gitHead":"f56f86be1c4a986275f15462a08b49529e664b1d","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@5.0.0","_nodeVersion":"16.14.0","_npmVersion":"8.3.1","dist":{"integrity":"sha512-4Uv1CkqQe+cEla9cMp1Gy/Aemkbt3Umf/Dc1cHwzq9BbPMC3a1ZX9LYCzjC2nCz9sqL+OqTYBeNu44o4QrbqIw==","shasum":"75a230b37f1b3f7fe4e3d7a8173c3623fd4f8b0f","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-5.0.0.tgz","fileCount":21,"unpackedSize":105534,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGIhLT/de9PgWsQhKdW36nAMmvys+psogmsDWzCE+cIdAiAk6b6ltBhpfUMyXDZ7VOn8YFA0HNKkyLd4vxZW42Jo8Q=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiWQ8yACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoUWQ/8DQjFTQX3AiEpby/LALBYhskY8hUP3au8yog5vfKyp2vDlPey\r\n4hLZgzm0aUmQ8Dnb8Y871GmJO6rskoym2rsHr4sgyHt2FoU6bErpkEM1o8J/\r\nmRgnUWpGpUa7JT6spKnSsrMTwcVdXTFJpxooE3Bp5l0Js/DbWfjzF5AFbf4m\r\nVdBDiZeYeeaDWvLpCpEY5Zqu8/SXCd4rf7uiudh25AZKT1pZKVXymr1TwfVy\r\nNHm/y0s6xXmc+l6TgH0SIJN/kfx/TICXzwcK8aVPF//kkXZpBpN5mhrssPXs\r\nm8LPmK5q9Que2fbcKjzms/aT6hd5HMXt0IqDfzGOnnUbkve6KtBa0kyVfdqs\r\njG/mad9K8YlpP65eCEPTD81devbns6caTBnyW20PXifhj2laor/cS5V9WDiJ\r\nisjNHBb5zYI2oETDYSpN1oEWHKmS2ofL8qG63T1o7dsQ2VLu1qst+emOR1Xk\r\nSD6Ic3XSOmZQfs/eBelTO350mMXchFsMovKL/7q1l4aeOdIV/e+yR1oPjm1j\r\nvWzVSPQhbgQ7tYbzo05S6H/UTFdSLsYCdDLGiEzrwI8ltAamEeyINp0URvqn\r\ngAej7QXiWDnua8ZrhBQ8dygXOkzlIe6EnE041CEIGhjqwaALo9zrdjrMit4G\r\ndkQahjOBY+POjzAZKlxilrhps5BKkqywni8=\r\n=rgFe\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"directories":{},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/multi-integer-range_5.0.0_1650003761981_0.7151293041188422"},"_hasShrinkwrap":false},"5.1.0":{"name":"multi-integer-range","version":"5.1.0","description":"Parses and manipulates multiple comma-separated integer ranges (eg 1-3,8-10)","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"sideEffects":false,"main":"./lib/cjs/index.js","module":"./lib/esm/index.js","exports":{"import":"./lib/esm/index.js","require":"./lib/cjs/index.js"},"types":"./lib/cjs/index.d.ts","scripts":{"test":"jest --coverage","doc":"node scripts/docgen.js","clean":"rimraf lib","build":"npm run clean && tsc -p tsconfig-esm.json && tsc -p tsconfig-cjs.json && node scripts/postbuild.js","prepack":"npm run build","prettier":"prettier --write src/**/*.{ts,js}"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"@types/jest":"^27.4.1","jest":"^27.5.1","jest-ts-webcompat-resolver":"^1.0.0","prettier":"^2.5.1","rimraf":"^3.0.2","ts-jest":"^27.1.3","typescript":"^4.6.2"},"prettier":{"singleQuote":true,"arrowParens":"avoid","trailingComma":"none"},"runkitExampleFilename":"example.js","gitHead":"27b13c2f6c8eea85e674732c63db576f0b213df3","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@5.1.0","_nodeVersion":"16.18.1","_npmVersion":"8.19.2","dist":{"integrity":"sha512-aip99W+hCV1eSPuSTNr9BXhcZUA6FY8L9OqPZe0ysZ1GOYFO6vVH/5tNCeC4SA+EqSx/g0v0oxQp1uCD8BKn7g==","shasum":"cd493fc7e340943a6ef860f9c8053e676ab7021e","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-5.1.0.tgz","fileCount":20,"unpackedSize":110143,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCiTwd1xeSd/99z5v8bVVR4FC2mnshaN0LurmkWmNG51QIgexDRE6r1ztf5qqMlVcGayQmHYoDV0yvCMr9XuawPvL8="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkCFccACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoRTg/+KeQHkDL9EKG4ydiH22/vdjG94Zw9WQK/UPlWrW/wqPunGs63\r\nt+1PINCXjpgiJ6oR/wPCqeiSQdOERpRBy3OIAJCXo8yKbmmbVbOFddqARnfB\r\nNaPrs5/N53fquqi6lqcUtvW60cnd1CYAquZt3/L5Rbzb3kiLXAl6X6rMMYvV\r\nzX0kq1JlwvkObaozespOqsiAt2NA4eveNZ7NJyt5y5SFW7SXI73MNVjawCa1\r\njUBApmkqq9lrBzNsZ8BcEyFouL76G3AAJmGQ6SpcMIYMEHAUWMjBcQdr1od1\r\nNs4ZWKQPE3besYkCO1bqrY09+eAa0pAuFHXBduq5dTL4/IInFIUhncq7zyCk\r\nCTFmXBd8hojkPMbGdrCUAIb/2ocss0h7SAIGvw9qKzDueIgL801pXmOkaQ/s\r\nkZaXJ8CogR/f8/1fAo+I3i45vYZiuaHUgzaFzSqizHVp+EZpbRlg2NxeW8Ef\r\nsf5+5+EXOyNs8xzbpskkQBddgG+KBo96Js67jjlLXADRjfOtWm7k/sI1AMUD\r\nW4W1r8Ik77HCoIsXS8xuS76anPsljJXNuHO6uL6uplTY/4KUE66dLak6q7zf\r\njexERZ4G/mQeOw7J49V3l1ctixE3OjsSwU4mOPsyhPUGILP4TzAlWmB9spuG\r\nHt7oedtBvVdIDYo8Fd4XS8atQivieQaarBg=\r\n=zhlS\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"directories":{},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/multi-integer-range_5.1.0_1678268187926_0.6956200061387872"},"_hasShrinkwrap":false},"5.2.0":{"name":"multi-integer-range","version":"5.2.0","description":"Parses and manipulates multiple comma-separated integer ranges (eg 1-3,8-10)","repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"sideEffects":false,"main":"./lib/cjs/index.js","module":"./lib/esm/index.js","exports":{"import":"./lib/esm/index.js","require":"./lib/cjs/index.js"},"types":"./lib/cjs/index.d.ts","scripts":{"test":"jest --coverage","doc":"node scripts/docgen.js","clean":"rimraf lib","build":"npm run clean && tsc -p tsconfig-esm.json && tsc -p tsconfig-cjs.json && node scripts/postbuild.js","prepack":"npm run build","prettier":"prettier --write src/**/*.{ts,js}"},"keywords":["integer","range","page","multiple","parseInt","parse"],"author":{"name":"Soichiro Miki"},"license":"MIT","devDependencies":{"@types/jest":"^27.4.1","jest":"^27.5.1","jest-ts-webcompat-resolver":"^1.0.0","prettier":"^2.5.1","rimraf":"^3.0.2","ts-jest":"^27.1.3","typescript":"^4.6.2"},"prettier":{"singleQuote":true,"arrowParens":"avoid","trailingComma":"none"},"runkitExampleFilename":"example.js","gitHead":"b6f5848a675389f6e1bc9fa45a276cc82bbc0d0b","bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","_id":"multi-integer-range@5.2.0","_nodeVersion":"16.18.1","_npmVersion":"8.19.2","dist":{"integrity":"sha512-FFJwl7mUYFizzE6rY86KaiN/aFxHtqWHHdEA4wvYOSCIlmSu6ysNmvU52GOfYQZn8cadi2MgyAppP/8nWHwIlA==","shasum":"2560c0ccee98bcc0306bf4a932a47747e8dd2c1b","tarball":"https://registry.npmjs.org/multi-integer-range/-/multi-integer-range-5.2.0.tgz","fileCount":20,"unpackedSize":113859,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIANZLg5QRxrQLNpiy/aM4A+N59iLV75zxC4cdoQU9V7OAiAU4T6Rjz/kzF+ueHEQ8VrR6XzkqeyketZl8wKS+LYBYA=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJkCee9ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmpNgQ//eJYavmj/aBmwjbqvvup8z2IdgtXtF8BPvPXx6/8EqnVa7cAN\r\nrPV+LP/LGdjtlikeU3whTq7sFUAvKvfdE5wxd0s+kr1cMO/6fuzJiwmC1LC3\r\n7AS1PuQLFjWWwltHfgvjIuEg6ISYFFsxcnZr07IYukBjjyE0WQOsTstfklWl\r\nAMrZO1rnyWYDFzRsOiQ+vtNoECiJe2Tsy51xpohq5R/L7zDyjMZIPWhgJrsb\r\nCiuOFAdAyzh1tzWLm0AsBu73tm8fcR8oA137EYtXlBcjmyEzufanJdxz1hJi\r\noSheHjr+9IHeNc/EIrfLE3MkNStfBb9I1GfKJ0Gv4+rmSuJ5pTkjM/7afpWU\r\ndbUPIAaGsIi7fxN/kKpK06WeN3BAiqffoQEk7wSc/MDbnfogrgLMGy21GMg8\r\nDhgYueSy/2AV3tQ7yYIwfwwKNArxTQSYhYj8hzUlvJ0rfgrmI0xD4gQwwr1R\r\nePw1/H5lW2Lj8HOMOdq7S7JtI1ZQKu6ygGiKMR1P1NSxmULYBUVEw0m1NhKg\r\nIFn25dltm1E0kx+N8G6+R4KYp579IdMUk+wHp6tMA0eNCs3PORHCi6ye0njo\r\n/mf7OhT9VU7kJlU2vaD47YA3TUXtpDITGELiGLRgbBR+2EgCj/mZ6Zo7gMlc\r\nKTfTT8Yxd9eXrirhNg45Gn0WYYEfCuEcTts=\r\n=aQfx\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"smikitky","email":"smiki-tky@umin.ac.jp"},"directories":{},"maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/multi-integer-range_5.2.0_1678370749487_0.9606754368826771"},"_hasShrinkwrap":false}},"readme":"# multi-integer-range\n\n[![Build Status](https://github.com/smikitky/node-multi-integer-range/actions/workflows/tests.yml/badge.svg)](https://github.com/smikitky/node-multi-integer-range/actions)\n[![Coverage Status](https://coveralls.io/repos/github/smikitky/node-multi-integer-range/badge.svg?branch=dev)](https://coveralls.io/github/smikitky/node-multi-integer-range)\n[![npm version](https://badge.fury.io/js/multi-integer-range.svg)](https://badge.fury.io/js/multi-integer-range)\n\nA small library that parses comma-delimited integer ranges (such as `\"1-3,8-10\"`) and manipulates such range data. This type of data is commonly used to specify which lines to highlight or which pages to print.\n\nKey features:\n\n- Addition (aka union, e.g., `1-2,6` &plus; `3-5` &rarr; `1-6`)\n- Subtraction (e.g., `1-10` &minus; `5-9` &rarr; `1-4,10`)\n- Inclusion check (e.g., `3,7-9` &sub; `1-10`)\n- Intersection (e.g., `1-5` &cap; `2-8` &rarr; `2-5`)\n- Unbounded ranges (aka infinite ranges, e.g., `5-`, meaning \"all integers &ge; 5\")\n- Ranges including negative integers or zero\n- ES6 iterator (`for ... of`, spread operator)\n- Array building (\"flatten\")\n\nThe range data are always _sorted and normalized_ to the smallest possible representation.\n\n---\n\n🚨 **Note**: The following README is for the 5.x release, whose API has changed drastically. For the docs of the 4.x release, see [this](https://github.com/smikitky/node-multi-integer-range/tree/v4.0.9).\n\n## Install\n\nInstall via npm or yarn:\n\n```\nnpm install multi-integer-range\n```\n\nVersion 5 is a hybrid package; it provides both a CommonJS version and an ES Module version, built from the same TypeScript source. Bundlers such as Webpack can automatically pick the ESM version and perform tree-shaking. This package has no external dependencies nor does it use any Node-specific API.\n\n🚨 The API style has changed drastically in version 5. The new API is slightly more verbose, but is simpler and tree-shakable 🌲. For example, if you don't use the default parser, your bundle will not include it. See the [CHANGELOG](./CHANGELOG.md) and the [docs for version 4](https://github.com/smikitky/node-multi-integer-range/tree/v4.0.9).\n\n## Basic Example\n\n<!-- prettier-ignore -->\n```js\nimport * as mr from 'multi-integer-range';\n\nconst ranges1 = mr.parse('1-6,9-12'); // [[1, 6], [9, 12]]\nconst ranges2 = mr.parse('7-10, 100'); // [[7, 10], [100, 100]]\nconst ranges3 = mr.normalize([1, 5, 6, [4, 2]]); // [[1, 6]]\n\nconst sum = mr.append(ranges1, ranges2); // [[1, 12], [100, 100]]\nconst diff = mr.subtract(ranges1, ranges2); // [[1, 6], [11, 12]]\nconst commonValues = mr.intersect(ranges1, ranges2); // [[9, 10]]\n\nconst str = mr.stringify(sum); // \"1-12,100\"\nconst bool = mr.has(ranges1, ranges3); // true\nconst isSame = mr.equals(ranges1, ranges2); // false\nconst array = mr.flatten(diff); // [1, 2, 3, 4, 5, 6, 11, 12]\nconst len = mr.length(ranges1); // 10\n```\n\n## Creating a normalized MultiIntegerRange\n\nThe fundamental data structure of this package is a **normalized** array of `[min, max]` tuples, as shown below. Here, 'normalized' means the range data is in the smallest possible representation and is sorted in ascending order. You can denote an unbounded (aka infinite) range using the JavaScript constant `Infinity`.\n\n<!-- prettier-ignore -->\n```ts\ntype Range = readonly [min: number, max: number];\ntype MultiIntegerRange = readonly Range[];\n\n// Examples of normalized MultiIntegerRanges\n[[1, 3], [5, 6], [9, 12]] // 1-3,5-6,9-12\n[[-Infinity, 4], [7, 7], [10, Infinity]] // -4,7,10-\n[[-Infinity, Infinity]] // all integers\n[] // empty\n\n// These are NOT normalized. Don't pass them to append() and such!\n[[3, 1]] // min is larger than max\n[[7, 9], [1, 4]] // not in the ascending order\n[[1, 5], [3, 7]] // there is an overlap of ranges\n[[1, 2], [3, 4]] // the two ranges can be combined to \"1-4\"\n[[Infinity, Infinity]] // makes no sense\n```\n\nMost functions take one or two **normalized** `MultiIntegerRange`s as shown above to work correctly. To produce a valid normalized `MultiIntegerRange`, you can use `normalize()`, `parse()` or `initialize()`. You can write a normalized `MultiIntgerRange` by hand as shown above, too.\n\n`normalize(data?: number | (number | Range)[])` creates a normalized `MultiIntegerRange` from a single integer or an unsorted array of integers/`Range`s. This and `initialize` are the only functions that can safely take an unsorted array. Do not pass unnormalized range data to other functions.\n\n<!-- prettier-ignore -->\n```ts\nconsole.log(mr.normalize(10)); // [[10, 10]]\nconsole.log(mr.normalize([3, 1, 2, 4, 5])); // [[1, 5]]\nconsole.log(mr.normalize([5, [2, 0], 6, 4])); // [[0, 2], [4, 6]]\nconsole.log(mr.normalize([7, 7, 10, 7, 7])); // [[7, 7], [10, 10]]\nconsole.log(mr.normalize()); // []\n\n// Do not directly pass an unnormalized array\n// to functions other than normalize().\nconst unsorted = [[3, 1], [2, 8]];\nconst wrong = mr.length(unsorted); // This won't work!\nconst correct = mr.length(mr.normalize(unsorted)); // 8\n```\n\n`parse(data: string, options?: Options)` creates a normalized `MultiIntegerRange` from a string. The string parser is permissive and accepts space characters before/after comma/hyphens. It calls `normalize()` under the hood, so the order is not important, and overlapped numbers are silently ignored.\n\n```ts\nconsole.log(mr.parse('1-3,10')); // [[1, 3], [10, 10]]\nconsole.log(mr.parse('3,\\t8-3,2,3,\\n10, 9 - 7 ')); // [[2, 10]]\n```\n\nBy default, the string parser does not try to parse unbounded ranges or negative integers. You need to pass an `options` object to modify the parsing behavior. To avoid ambiguity, all negative integers must always be enclosed in parentheses. If you don't like the default `parse()`, you can always create and use your custom parsing function instead, as long as it returns a normalized `MultiIntegerRange`.\n\n```ts\nconsole.log(mr.parse('7-')); // throws a SyntaxError\n\nconsole.log(mr.parse('7-', { parseUnbounded: true })); // [[7, Infinity]]\nconsole.log(mr.parse('(-7)-(-1)', { parseNegative: true })); // [[-7, -1]]\nconsole.log(\n  mr.parse('0-,(-6)-(-2),-(-100)', {\n    parseUnbounded: true,\n    parseNegative: true\n  })\n); // [[-Infinity, -100], [-6, -2], [0, Infinity]]\n```\n\n## API Reference\n\nSee [api-reference.md](api-reference.md).\n\n## Tips\n\n### Iteration\n\nSince a `MultiIntegerRange` is just an array of `Range`s, if you naively iterate over it (e.g., in a for-of loop), you'll simply get each `Range` tuple one by one. To iterate each integer contained in the `MultiIntegerRange` instead, use `iterate()` like so:\n\n```ts\nconst ranges = mr.parse('2,5-7');\n\nfor (const page of ranges) {\n  console.log(page);\n} // prints 2 items: [2, 2] and [5, 7]\n\nfor (const page of mr.iterate(ranges)) {\n  console.log(page);\n} // prints 4 items: 2, 5, 6 and 7\n\n// array spreading (alternative of flatten())\nconst arr1 = [...mr.iterate(ranges)]; //=> [2, 5, 6, 7]\nconst arr2 = Array.from(mr.iterate(ranges)); //=> [2, 5, 6, 7]\n```\n\n### Combine Intersection and Unbounded Ranges\n\nIntersection is especially useful to \"trim\" unbounded ranges.\n\n```ts\nconst userInput = '-5,15-';\nconst pagesInMyDoc = [[1, 20]]; // 1-20\nconst pagesToPrint = mr.intersect(\n  mr.parse(userInput, { parseUnbounded: true }),\n  pagesInMyDoc\n); // [[1, 5], [15, 20]]\nfor (const page of mr.iterate(pagesToPrint)) await printPage(page);\n```\n\n## Legacy Classe-based API\n\nFor compatibility purposes, version 5 exports the `MultiRange` class and `multirange` function, which is mostly compatible with the 4.x API but has been rewritten to use the new functional API under the hood. See the [4.x documentation](https://github.com/smikitky/node-multi-integer-range/tree/v4.0.9) for the usage. The use of this compatibility layer is discouraged because it is not tree-shakable and has no performance merit. Use this only during migration. These may be removed in the future.\n\n## Caveats\n\n**Performance Considerations**: This library works efficiently for large ranges as long as they're _mostly_ continuous (e.g., `1-10240000,20480000-50960000`). However, this library is not intended to be efficient with a heavily fragmented set of integers that are scarcely continuous (e.g., random 10000 integers between 1 to 1000000).\n\n**No Integer Type Checks**: Make sure you are not passing floating-point `number`s to this library. For example, don't do `normalize(3.14)`. For performance reasons, the library does not check if a passed number is an integer. Passing a float will result in unexpected and unrecoverable behavior.\n\n## Comparison with Similar Libraries\n\n[range-parser](https://www.npmjs.com/package/range-parser) specializes in parsing range requests in HTTP headers as defined in RFC 7233, and it behaves in a way that is usually inappropriate for other purposes. For example, `'-5'` means \"last 5 bytes\".\n\n[parse-numeric-range](https://www.npmjs.com/package/parse-numeric-range) is fine for small ranges, but it always builds a \"flat\" array, which makes it very inefficient for large ranges such as byte ranges. Also, whether you like it or not, it handles overlapping or descending ranges as-is, without normalization. For example, `'4-2,1-3'` results in `[4, 3, 2, 1, 2, 3]`.\n\nmulti-integer-range is a general-purpose library for handling this type of data structure. It has a default parser that is intuitive enough for many purposes, but you can also use a custom parser. Its real value lies in its ability to treat normalized ranges as intermediate forms, allowing for a variety of mathematical operations. See the [API reference](api-reference.md).\n\n| Input     | multi-integer-range           | range-parser                              | parse-numeric-range        |\n| --------- | ----------------------------- | ----------------------------------------- | -------------------------- |\n| '1-3'     | [[1, 3]]                      | [{ start: 1, end: 3 }]                    | [1, 2, 3]                  |\n| '1-1000'  | [[1, 1000]]                   | [{ start: 1, end: 1000 }]                 | [1, 2, ..., 999, 1000 ] ⚠️ |\n| '5-1'     | [[1, 5]]                      | (error)                                   | [5, 4, 3, 2, 1]            |\n| '4-2,1-3' | [[1, 4]]                      | [{ start: 1, end: 3 }] ⚠️<sup>1</sup>     | [4, 3, 2, 1, 2, 3]         |\n| '-5'      | [[-Infinity, 5]] <sup>2</sup> | [{ start: 9995, end: 9999 }] <sup>3</sup> | [-5]                       |\n| '5-'      | [[5, Infinity]] <sup>2</sup>  | [{ start: 5, end: 9999 }] <sup>3</sup>    | []                         |\n\n<sup>1</sup>: With `combine` option. <sup>2</sup>: With `parseUnbounded` option. <sup>3</sup>: When `size` is 10000.\n\n## Development\n\nTo test:\n\n```\nnpm ci\nnpm test\n```\n\nTo generate CJS and ESM builds:\n\n```\nnpm ci\nnpm run build\n```\n\nPlease report bugs and suggestions using GitHub issues.\n\n## Changelog\n\nSee [CHANGELOG.md](CHANGELOG.md).\n\n## Author\n\nSoichiro Miki (https://github.com/smikitky)\n\n## License\n\nMIT\n","maintainers":[{"name":"smikitky","email":"smiki-tky@umin.ac.jp"}],"time":{"modified":"2023-03-09T14:05:49.799Z","created":"2015-10-17T17:03:56.017Z","1.0.0":"2015-10-17T17:03:56.017Z","1.0.1":"2015-10-17T17:11:26.641Z","1.1.0":"2015-10-17T18:53:15.369Z","1.2.0":"2015-10-18T06:04:24.361Z","1.2.1":"2015-10-19T04:16:00.913Z","1.3.0":"2015-10-20T04:34:49.103Z","1.3.1":"2015-10-22T10:42:44.939Z","1.4.0":"2016-01-22T06:33:06.055Z","1.4.1":"2016-01-24T10:21:37.418Z","1.4.2":"2016-01-24T10:27:16.217Z","1.4.3":"2016-02-17T02:32:01.417Z","2.0.0":"2016-06-23T15:11:27.787Z","2.1.0":"2016-09-06T10:17:58.936Z","3.0.0":"2016-10-06T16:24:32.941Z","4.0.0":"2017-07-15T05:47:57.456Z","4.0.1":"2017-07-15T07:48:29.320Z","4.0.2":"2017-07-15T09:33:55.658Z","4.0.3":"2017-09-13T12:00:50.159Z","4.0.4":"2018-02-13T05:54:38.636Z","4.0.5":"2018-06-19T04:58:16.584Z","4.0.6":"2018-07-10T10:07:59.743Z","4.0.7":"2018-11-20T05:49:33.627Z","4.0.8":"2019-10-24T06:43:03.712Z","4.0.9":"2021-08-14T04:40:00.012Z","5.0.0-alpha.1":"2021-08-15T09:57:23.850Z","5.0.0-alpha.2":"2021-08-15T10:22:22.239Z","5.0.0-alpha.3":"2021-08-15T10:51:41.234Z","5.0.0-alpha.4":"2021-08-15T10:53:39.174Z","5.0.0-alpha.5":"2021-08-15T11:42:53.866Z","5.0.0-alpha.6":"2021-08-15T12:48:38.016Z","5.0.0-beta.0":"2022-03-11T02:06:24.851Z","5.0.0-beta.1":"2022-03-11T02:54:26.438Z","5.0.0-rc.0":"2022-03-11T06:14:39.857Z","5.0.0-rc.1":"2022-03-15T01:50:07.562Z","5.0.0-rc.2":"2022-03-15T11:37:30.457Z","5.0.0":"2022-04-15T06:22:42.147Z","5.1.0":"2023-03-08T09:36:28.037Z","5.2.0":"2023-03-09T14:05:49.675Z"},"homepage":"https://github.com/smikitky/node-multi-integer-range#readme","keywords":["integer","range","page","multiple","parseInt","parse"],"repository":{"type":"git","url":"git+https://github.com/smikitky/node-multi-integer-range.git"},"author":{"name":"Soichiro Miki"},"bugs":{"url":"https://github.com/smikitky/node-multi-integer-range/issues"},"license":"MIT","readmeFilename":"README.md","users":{"khai96_":true,"adobnikar":true}}